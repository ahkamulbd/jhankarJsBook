/** Problem 1 from Page # 343 */

const obj1 = {
    id: 1, 
    name: 'mukta',
    address: 'mirpur'
}
// console.log (obj1.address);

/** Problem 2 from Page # 343 */

const library = {
    name: 'city library',
    books: [
        {
            id: 1,
            title: 'JavaScript Basics', 
            price: 300
        },
        {
            id: 2,
            title: 'Python Essentials', 
            price: 500
        },
    ]
}
// console.log (library.books [1].price);

/** Problem 3 from Page # 343 */

const school = {
    name: 'Green School',
    students: [
        {
            id: 1,
            name: 'Samiha'
        },
        {
            id: 2,
            name: 'Kamal'
        },
    ]
}
// console.log (school.students [1].name);

/** Problem 4 from Page # 343 */

const shop = {
    items: [
        {
            name: 'pen',
            stock: 100
        },
        {
            name: 'notebook',
            stock: 50
        }
    ]
}
// console.log (shop.items [1].stock);

/** Problem 5 from Page # 343 */

const movie = {
    title: 'Inception',
    director: {
        name: 'Nolan',
        age: 50
    },
    rating: 8.8
}
// console.log (movie.director.name);

/** Problem 6 from Page # 343 */

const game = {
    name: 'football',
    players: [
        {
            id: 1,
            name: 'Messi'
        },
        {
            id: 2,
            name: 'Ronaldo'
        },
    ]
}
// console.log (game.players [0].name);

/** Problem 7 from Page # 343 */

const vehicle = {
    type: 'car',
    features: {
        color: 'red',
        brand: {
            name: 'Toyota',
            model: 'Corolla'
        }
    }
}
// console.log (vehicle.features.brand.name);

/** ===== Optional Chaining: ============ */

const user = {
    name: 'Rahul',
    address: {
        city: 'Dhaka'
    }
}
// console.log (user?.address?.city);
// console.log (user?.profile?.email);
// console.log (user.profile.email); // TypeError

/** ================ Nullish Coalescing Operator (??) ========================== */

    /** Nullish Coalescing is a logical operator which is used to compare two values with null and undefined. If left one is null or undefined, it will print right one; otherwise, left one will be printed. But if left one is 0 or falsy value, it will print o or falsy value.  
     * 
*/

/** 
         * üîπ Nullish Coalescing Operator (??) ‡¶ï‡¶ø?

        ?? ‡¶π‡¶≤‡ßã ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ú‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ ‡¶Ø‡¶æ null ‡¶Ö‡¶•‡¶¨‡¶æ undefined ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

        üëâ ‡¶∏‡¶π‡¶ú ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü:

        ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ü‡¶ø null ‡¶¨‡¶æ undefined ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶® ‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

        ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

        üîπ ‡¶∏‡¶ø‡¶®‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏:
        let result = value1 ?? value2;


        üëâ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã:

        ‡¶Ø‡¶¶‡¶ø value1 null ‡¶¨‡¶æ undefined ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá result = value1‡•§

        ‡¶Ø‡¶¶‡¶ø value1 null ‡¶¨‡¶æ undefined ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá result = value2‡•§

        üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        (‡ßß) ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
        let userName = null;
        let defaultName = "Guest";

        let finalName = userName ?? defaultName;
        console.log(finalName); // Output: "Guest"


        üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá userName = null, ‡¶§‡¶æ‡¶á defaultName ("Guest") ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

        (‡ß®) undefined ‡¶è‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá:
        let userName;
        let finalName = userName ?? "Guest";
        console.log(finalName); // Output: "Guest"

        (‡ß©) ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ö‡¶®‡ßç‡¶Ø falsy value (‡¶Ø‡ßá‡¶Æ‡¶® 0, false, '') ‡¶•‡¶æ‡¶ï‡¶≤‡ßá:
        let count = 0;
        let finalCount = count ?? 5;

        console.log(finalCount); // Output: 0


        üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá count = 0 ‡¶π‡¶≤‡ßã falsy ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ null/undefined ‡¶®‡ßü‡•§ ‡¶§‡¶æ‡¶á ?? ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ 0 ‡¶ï‡ßá‡¶á ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá, 5 ‡¶®‡ßá‡ßü‡¶®‡¶ø‡•§

        üîπ Nullish Coalescing (??) ‡¶¨‡¶®‡¶æ‡¶Æ OR (||) ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø

        ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶á ‡¶ó‡ßÅ‡¶≤‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßá‡•§

        || ‚Üí falsy values (‡¶Ø‡ßá‡¶Æ‡¶®: 0, false, '', null, undefined) ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá‡¶á ‡¶ß‡¶∞‡¶¨‡ßá‡•§

        ?? ‚Üí ‡¶ï‡ßá‡¶¨‡¶≤ null ‡¶Ü‡¶∞ undefined ‡¶ï‡ßá‡¶á ‡¶ß‡¶∞‡¶¨‡ßá‡•§

        ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        let count = 0;

        console.log(count || 5); // Output: 5  (‡¶ï‡¶æ‡¶∞‡¶£ 0 ‡¶π‡¶≤‡ßã falsy)
        console.log(count ?? 5); // Output: 0  (‡¶ï‡¶æ‡¶∞‡¶£ 0 null ‡¶¨‡¶æ undefined ‡¶®‡ßü)

        üîπ Nested Example:
        let user = {
        profile: {
            name: null,
            age: 25
        }
        };

        let userName = user.profile.name ?? "Anonymous";
        console.log(userName); // Output: "Anonymous"


        ‚úÖ ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™:

        ?? ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡¶ñ‡¶® fallback ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶ñ‡¶® ‡¶Æ‡ßÇ‡¶≤ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ü‡¶ø null ‡¶¨‡¶æ undefined ‡¶π‡ßü‡•§

        || ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡¶¨ falsy ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ (0, false, '') ‡¶ï‡ßá‡¶á null/undefined ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡ßü‡•§

        ‡¶§‡¶æ‡¶á ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ?? ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï, ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶ñ‡¶® 0, false, ‡¶¨‡¶æ '' ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡•§
 */


/** Problem 1 from Page # 347 */

const x = null;
// console.log (x ?? 75);

/** Problem 2 from Page # 347: ‡¶è‡¶ï‡¶ü‡¶æ product ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá stock ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶®‡¶æ‡¶á; Nullish Coalescing ‡¶¶‡¶ø‡ßü‡ßá stock-‡¶è‡¶∞ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Æ‡¶æ‡¶® 0 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡•§ */

let product = {};
product.stock ??= 0;
// product.stock = 0;

// console.log(product.stock); // Output: 0


/** Problem 3 from Page # 347: productDetails ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá discount ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® falsy ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶® 10 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡•§  */

let productDetails = { discount: null };

if (!productDetails.discount) {
  productDetails.discount = 10;
}

// console.log(productDetails.discount); // Output: 10

/** Problem 4 from Page # 347: Optional Chaining ‡¶¶‡¶ø‡ßü‡ßá vehicle ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá engine ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Æ‡¶æ‡¶® 'Engine info missing' ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡•§ */

let vehicle4 = {};

let engineInfo = vehicle4?.engine ?? "Engine info missing";

// console.log(engineInfo); // Output: "Engine info missing"


/** Problem 5 from Page # 347: Optional Chaining ‡¶¶‡¶ø‡ßü‡ßá restaurant ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá menu ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶∞‡¶ø‡¶° ‡¶ï‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá 'Menu not available' ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡•§ */

let restaurant = {};

let menuInfo = restaurant?.menu ?? "Menu not available";

// console.log(menuInfo); // Output: "Menu not available"

/** Problem 6 from Page # 347: profile ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá social ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá twitter ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡•§ Optional Chaining ‡¶¶‡¶ø‡ßü‡ßá twitter ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá 'Twitter handle not available' ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡•§ */

let profile = {
  social: {
    // twitter: "@user123"
  }
};

let twitterHandle = profile?.social?.twitter ?? "Twitter handle not available";

// console.log(twitterHandle); // Output: "Twitter handle not available"
// console.log (typeof profile.social.twitter);

/** ===================== Pre and Post Increment ================== */

// let a = 5;
// let b = a++;
// let c = ++a;
// console.log (a);


/** Problem 1 from Page # 350 */

let a = 59;
// let b = a++;
// console.log (a, b);

let b = ++a;
// console.log (a, b);

/** Problem 2 from Page # 350 */

let orange = 100;
orange /= 15;
// console.log (orange);
// console.log (orange.toFixed (2));
// console.log (Math.round (orange));

/** Problem 3 from Page # 350 */

let mango = 20;
mango &&= 10;
// console.log (mango);

/** Problem 4 from Page # 350 */

let bananas = 50;
bananas *= 4;
// console.log (bananas);

/** Problem 5 from Page # 350 */

let grapes = 19;
grapes ||= 91;
// console.log (grapes);

/** Problem 6 from Page # 350 */

let apples = 50;
apples -= 10;
// console.log (apples);

/** Problem 7 from Page # 350 */

let price = undefined;
price ||= 90;
// console.log (price);

/** Problem 8 from Page # 350 */

let tomato = 0;
mango &&= 5;
// console.log (tomato);

/** Problem 9 from Page # 350 */

let apples9 = 15;
apples9 %= 6;
console.log (apples9);
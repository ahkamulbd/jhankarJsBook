// console.log (this);

/** =================== this in the method of Object ===================== */

// const palyer = {
//     name: 'Sakib',
//     score: 100,
//     showScore () {
//         console.log (this.score);
//     }
// }
// console.log (palyer.showScore ());
// palyer.showScore ();

/** ======================= this in the Class =========================== */

// class Player {
//     constructor (name, level) {
//         this.name = name;
//         this.level = level;
//     }
//     showDetails () {
//         console.log (this.name);
//         console.log (this.level);
//     }
// }
// const gamer = new Player ('Zak', 5);
// gamer.showDetails ();


/** ================== this in the normal function =============================== */

// function doSomething (number) {
//     console.log (this);
// }
// doSomething (3);


/** ==================== this in Constructor function ============================ */

// function Person (name) {
//     this.name = name;
// }
// const user = new Person ('Ayan');
// // console.log (user);
// // console.log (user.name);

/** ================ this in Event Listener ============================== */

// document.getElementById ('click-btn').addEventListener ('click', () => {
//     // console.log (this);
// })

/** ==================== this in Object method of Arrow Fucntion ================ */

// const person1 = {
//     name: 'John',
//     greet: function (){
//         return `Hello, I am ${this.name}`;
//     }
// }
// console.log (person1.greet ());

// const person2 = {
//     name: 'John',
//     greet: () => {
//         return `Hello, I am ${this.name}`;
//     }
// }
// console.log (person2.greet ());

/** ====================== this in 'use strict' mode =================== */

// "use strict";
// function test () {
//     console.log (this);
// }
// test ();

/** Problem 1 from Page # 379: What is the window object in browser? */

/** 
 * Answer:
 * 
        * Browser ‡¶è ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ì‡ßü‡ßá‡¶¨‡¶™‡ßá‡¶ú ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®, ‡¶§‡¶ñ‡¶® ‡¶∏‡ßá‡¶á ‡¶™‡ßÅ‡¶∞‡ßã ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶â‡¶á‡¶®‡ßç‡¶°‡ßã (tab ‡¶∏‡¶π) ‡¶ï‡ßá JavaScript ‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡ßá‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶á ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶π‡¶≤‡ßã window object‡•§

        üîπ ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶≤‡ßá:

        window ‡¶π‡¶ö‡ßç‡¶õ‡ßá Browser ‡¶è‡¶∞ global object‡•§

        ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤‡¶ø ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá window ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü‡•§

        üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        console.log(window); 


        üëâ ‡¶è‡¶ü‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßÅ‡¶∞‡ßã window ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶¨ property ‡¶Ü‡¶∞ method ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§

        var name = "Ahkamul";
        console.log(window.name);   // Ahkamul

        üîπ window object ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡ßÄ ‡¶ï‡ßÄ?

        window ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶¨‡¶ø‡¶≤‡ßç‡¶ü-‡¶á‡¶® property ‡¶Ü‡¶∞ method ‡¶•‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ browser control ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®‡¶É

        Document control:

        window.document ‚Üí ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ HTML ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

        Alert, Confirm, Prompt:

        window.alert("Hello");

        window.confirm("Are you sure?");

        window.prompt("Enter your name:");

        Timeout & Interval:

        window.setTimeout(function(){...}, 2000);

        window.setInterval(function(){...}, 1000);

        Browser Info:

        window.location ‚Üí current URL

        window.navigator ‚Üí browser ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶á‡¶®‡¶´‡ßã

        window.history ‚Üí back/forward history

        üîπ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®:

        JavaScript ‡¶è ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶≤‡ßã window‡•§

        ‡¶Ü‡¶∞ window ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶á document, console, localStorage, alert ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá‡•§

        üëâ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶¶‡¶æ‡¶Å‡ßú‡¶æ‡¶≤‡ßã, Browser ‡¶è‡¶∞ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ window object ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶π‡ßü‡•§
 */

/** Problem 2 from Page # 379: What will be the value of this if it is run as console.log (this) in the browser?  */

console.log (this); // Output - window

/** 
 * Answer:
 * 
       * üîπ ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø Browser Console ‡¶è ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá‡¶®‡¶É
       console.log(this);


       üëâ ‡¶§‡¶ñ‡¶® this ‡¶Ü‡¶∏‡¶≤‡ßá global object ‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

       Browser ‡¶è global object ‡¶π‡¶≤‡ßã window object‡•§

       üîπ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶¶‡¶æ‡¶Å‡ßú‡¶æ‡¶≤‡ßã:

       Browser ‡¶è ‚Üí this === window ‚úÖ

       ‡¶§‡¶æ‡¶á console ‡¶è ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá ‡¶™‡ßÅ‡¶∞‡ßã window object‡•§

       üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
       console.log(this === window);  // true

       üîπ ‡¶§‡¶¨‡ßá ‡¶ñ‡ßá‡ßü‡¶æ‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®:

       this ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶® ‡¶§‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡ßü‡¶É

       ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶ï‡¶®‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá (script ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá):

       this ‚Üí window

       ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá (normal function):

       non-strict mode ‡¶è ‚Üí window

       strict mode ‡¶è ‚Üí undefined

       object method ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá:

       this ‚Üí ‡¶ì‡¶á object

       arrow function ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá:

       this ‚Üí surrounding lexical scope ‡¶è‡¶∞ this

       üëâ ‡¶§‡¶æ‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ,
       console.log(this) ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá window object‡•§
 */



/** Problem 3 from Page # 379: What will be the value of this, if object method is declared in normal function and arrow function?  */

/**
 * Answer:
 * 
       * this ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ object method ‡¶è ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßü depending on ‡¶Ü‡¶™‡¶®‡¶ø normal function ‡¶®‡¶æ‡¶ï‡¶ø arrow function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§

       ‡ßßÔ∏è‚É£ Object Method ‡¶è Normal Function
       const person = {
       name: "Ahkamul",
       greet: function () {
       console.log(this.name);
       }
       };

       person.greet();   // "Ahkamul"


       üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá greet ‡¶π‡¶≤‡ßã normal function method‡•§

       this ‡¶è‡¶ñ‡¶æ‡¶®‡ßá person object ‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡¶õ‡ßá‡•§

       ‡¶§‡¶æ‡¶á ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá "Ahkamul" ‚úÖ

       ‡ß®Ô∏è‚É£ Object Method ‡¶è Arrow Function
       const person = {
       name: "Ahkamul",
       greet: () => {
       console.log(this.name);
       }
       };

       person.greet();   // undefined


       üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá greet ‡¶π‡¶≤‡ßã arrow function method‡•§

       Arrow function ‡¶è‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ this ‡¶®‡ßá‡¶á‡•§

       ‡¶è‡¶ü‡¶æ surrounding lexical scope ‡¶è‡¶∞ this ‡¶®‡ßá‡ßü‡•§

       ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡ßá surrounding scope ‡¶π‡¶≤‡ßã global scope, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá this ‡¶π‡¶≤‡ßã window‡•§

       window.name ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá), ‡¶§‡¶æ‡¶á ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá undefined‡•§

       üîë ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ
       Function Type	this ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶®
       Normal Function	‡¶Ø‡ßá‡¶á object ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶∏‡ßá‡¶á object
       Arrow Function	Surrounding lexical scope ‡¶è‡¶∞ this (object ‡¶®‡ßü)

       üëâ ‡¶§‡¶æ‡¶á object method declare ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü normal function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§
       ‡¶Ü‡¶∞ arrow function ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ callback ‡¶¨‡¶æ inner function ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§
 */
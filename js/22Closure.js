// let apuRoast = 0;
// let bpuRoast = 0;
// let cpuRoast = 0;
// let dpuRoast = 0;
// let epuRoast = 0;

function counter () {
    let count = 0;

    return function () {
        count++;

        return count;
    }
}

const apuRoast = counter ();
// console.log (apuRoast());
// console.log (apuRoast());
// console.log (apuRoast());
// console.log (apuRoast());

/** Problme 1 from Page # 390: What is the Closure in JavaScript? */

/** Answer:
 * 
        * üîπ Closure ‡¶ï‡ßÄ?

        Closure ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ì‡ßü‡¶æ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®, ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶¨‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‚Äîeven ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶á‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡•§

        ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé, Closure ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ú‡¶Æ ‡¶Ø‡¶æ inner function-‡¶ï‡ßá outer function-‡¶è‡¶∞ scope-‡¶è‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶¶‡ßá‡ßü‡•§

        üîπ ‡¶ï‡ßá‡¶® Closure ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞?

        ‡¶°‡ßá‡¶ü‡¶æ private ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá (‡¶Ø‡ßá‡¶® ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá access ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü)‡•§

        ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ï‡ßá persistent (‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ) ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá, ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá‡¶ì ‡¶∏‡ßá‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

        ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶∞ function factory ‡¶¨‡¶æ module pattern ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá‡•§

        üîπ Closure ‡¶è‡¶∞ ‡¶ó‡¶†‡¶®

        Closure ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü ‡¶Ø‡¶ñ‡¶®:

        ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

        inner function, outer function-‡¶è‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

        outer function return ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶ì inner function ‡¶∏‡ßá‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ access ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

        üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ßß: ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ Closure
        function outerFunction() {
            let count = 0; // outer function-‡¶è‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤

            function innerFunction() {
                count++; // inner function outer-‡¶è‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá
                return count;
            }

            return innerFunction;
        }

        const closureExample = outerFunction();

        console.log(closureExample()); // 1
        console.log(closureExample()); // 2
        console.log(closureExample()); // 3

        ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

        outerFunction() ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ innerFunction ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§

        ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ count ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡ßü ‡¶®‡¶æ, ‡¶¨‡¶∞‡¶Ç ‡¶Æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡•§

        ‡¶§‡¶æ‡¶á ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ closureExample() ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá count ‡¶è‡¶ï ‡¶è‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡ßú‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡•§

        üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß®: Data Private ‡¶∞‡¶æ‡¶ñ‡¶æ
        function bankAccount(initialBalance) {
            let balance = initialBalance;

            return function(amount) {
                balance += amount;
                return balance;
            }
        }

        const account = bankAccount(100); 

        console.log(account(50));  // 150
        console.log(account(-20)); // 130
        console.log(account(70));  // 200

        ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

        ‡¶è‡¶ñ‡¶æ‡¶®‡ßá balance ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø access ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶®‡¶æ‡•§

        ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ inner function-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá balance ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ì ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

        ‡¶è‡¶≠‡¶æ‡¶¨‡ßá‡¶á closure data private ‡¶∞‡¶æ‡¶ñ‡ßá‡•§

        üîπ Closure-‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï ‡¶¶‡¶ø‡¶ï

        Module Design Pattern ‚Üí ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá private ‡¶°‡ßá‡¶ü‡¶æ ‡¶ì public ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

        Event Handler ‚Üí ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá event listener ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

        setTimeout / setInterval ‚Üí ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã future time-‡¶è ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá‡•§

        üëâ ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶≤‡ßá:
        Closure = Function + ‡¶§‡¶æ‡¶∞ lexical scope (‡¶Ø‡ßá‡¶ü‡¶æ function ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ scope ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá)‡•§
 */


/** Problem 2 from Page # 390 */

function fridgeTracker () {
    let count = 0;

    function openTime () {
        count++;

        return count;
    }

    return openTime;
}

const aboulOpened = fridgeTracker ();

// console.log (aboulOpened ());
// console.log (aboulOpened ());
// console.log (aboulOpened ());
// console.log (aboulOpened ());
// console.log (aboulOpened ());

/** Example from Problem 1 */

function bankBalance (initialBalance) {
    let balance = initialBalance;

    function newBalance (amount) {
        balance += amount;

        return balance;
    }

    return newBalance;
}

const polBalance = bankBalance (500);

// console.log (polBalance (300));
// console.log (polBalance (- 200));
// console.log (polBalance (300));
// console.log (polBalance (500));


/** Problem 3 from Page # 391 */

function taskTracker () {
    let count = 0;

    return function () {
        count++;

        return count;
    }
}

const zarifTask = taskTracker ();

// console.log (zarifTask ());
// console.log (zarifTask ());
// console.log (zarifTask ());

/** Another Example: */

function numberOfSchoolStudent (initialStudent) {
    let presentStudent = initialStudent;

    return function (student) {
        presentStudent += student;

        return presentStudent;
    }
}

const biddapithStudent = numberOfSchoolStudent (1000);

// console.log (biddapithStudent (50));
// console.log (biddapithStudent (- 150));
// console.log (biddapithStudent (200));
// console.log (biddapithStudent (250));

biddapithStudent (100);
biddapithStudent (-300);
console.log (biddapithStudent (100));
/** ================== Single Threaded JavaSceipt ===================== */

// console.log (1);
// console.log (2);
// doSomething ();
// console.log (4);
// console.log (5);
// console.log (6);
// // const doSomething = () => console.log (3);
// function doSomething () {
//     console.log (3);
// }

/** Problem 1 from Page # 303: What will happen after function call in synchonous codes? */

/** Answer: Codes will work synchronously after calling function */

/** Problem 2 from Page # 303: Is JavaScript Single Threaded? */

/** Answer: Yes, JavaScript is single threaded */

/** ============= setTimeout and setInterval Functions ================== */

// console.log (1);
// console.log (2);
// setTimeout (() => {
//     console.log (3);
// }, 3000)
// console.log (4);
// console.log (5);
// console.log (6);

// setInterval (() => {
//     console.log ("I M U");
// }, 1000);

// let num = 0;
// setInterval (() => {
//     num ++;
//     console.log (num);
// }, 1000);

// let num = 0;
// const intervalID = setInterval (() => {
//     num ++;
//     console.log (num);

//     if (num === 10){
//         clearInterval (intervalID);
//     }
// }, 1000);


/** Problem 1 from Page # 307 */

// console.log ('Bangladesh 1');
setTimeout (() => {
    // console.log (`I wasted 3 secodes of my life by looking at screen and doing nothing`);
}, 3000);
// console.log ('Bangladesh 2');

/** Problem 2 from Page # 307 */

let number = 131;

const numberInterval = setInterval (() => {
    number = number + 2;
    // console.log (number);

    if (number <= 140) {
        clearInterval (numberInterval);
    }
}, 2000);

/** Problem 3 from Page # 307 */

let text = `I am learning JavaScript`;
let count = 0;

// const showText6 = setInterval (() => {
//     count ++;
//    console.log (text);

//    if (count === 6) {
//     clearInterval (showText6);
//    }
// }, 2000);

/** Problem 4 from Page # 307 */


setTimeout (() => {}, 0); // Default value - 0;          


/** ================= Call stack, Callback Queue, Event Loop */

// function first() {
//     console.log("Inside first()");
//     second();
//     console.log("End of first()");
// }

// function second() {
//     console.log("Inside second()");
// }

// console.log("Start");
// first();
// console.log("Finish");

// Example 2

// console.log ('Start');

// setTimeout (() => {
//     console.log ('Timeout 1');
// }, 5000);

// setTimeout (() => {
//     console.log ('Timeout 2');
// }, 500);

// console.log ('End');

/** Problem 1 from Page # 310: Event Loop ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ ? */

/** Answer: 
 
        * JavaScript Event Loop рж╣рж▓рзЛ рж╕рзЗржЗ ржорзЗржХрж╛ржирж┐ржЬржо, ржпрзЗржЯрж╛рж░ ржХрж╛рж░ржгрзЗ JavaScript ржПржХрж╕рж╛ржерзЗ ржЕржирзЗржХржЧрзБрж▓рзЛ ржХрж╛ржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЗ, ржпржжрж┐ржУ JavaScript single-threaded (ржорж╛ржирзЗ ржПржХржмрж╛рж░рзЗ ржПржХржЯрж╛ржЗ ржХрж╛ржЬ ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░рзЗ)ред


        JavaScript ржПрж░ execution model рждрж┐ржиржЯрж╛ ржЬрж┐ржирж┐рж╕рзЗрж░ ржЙржкрж░ ржжрж╛ржБржбрж╝рж╛ржирзЛ:

        Call Stack (Execution Stack)
        ЁЯСЙ ржпрзЗржЦрж╛ржирзЗ synchronous (рж╕рж░рж╛рж╕рж░рж┐ ржЪрж▓рж╛) ржХрзЛржбржЧрзБрж▓рзЛ ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржпрж╝ред

        FIFO ржирж╛, ржмрж░ржВ LIFO (Last In First Out) ржирж┐ржпрж╝ржорзЗ ржХрж╛ржЬ ржХрж░рзЗред

        ржпрзЗржоржи:

        function a() { console.log("A"); }
        function b() { a(); console.log("B"); }
        b();


        ржПржЦрж╛ржирзЗ ржЖржЧрзЗ b() stack ржП ржврзБржХржмрзЗ тЖТ рждрж╛рж░ржкрж░ a() тЖТ a() рж╢рзЗрж╖ рж╣рж▓рзЗ ржмрзЗрж░ рж╣ржмрзЗ тЖТ рждрж╛рж░ржкрж░ b() рж╢рзЗрж╖ рж╣ржмрзЗред

        Web APIs / Background APIs (Browser or Node.js ржжрзНржмрж╛рж░рж╛ ржкрзНрж░ржжрждрзНржд)
        ЁЯСЙ ржпржЦржи asynchronous ржХрж╛ржЬ рж╣ржпрж╝ (ржпрзЗржоржи setTimeout, fetch, DOM event ржЗрждрзНржпрж╛ржжрж┐), рж╕рзЗржЧрзБрж▓рзЛ stack ржП ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржирж╛ рж╣ржпрж╝рзЗ browser ржПрж░ background ржП ржЪрж▓рзЗред

        ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ ржПржЧрзБрж▓рзЛ callback queue рждрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржпрж╝ред

        Callback Queue (or Task Queue / Message Queue)
        ЁЯСЙ asynchronous ржХрж╛ржЬржЧрзБрж▓рзЛ рж╢рзЗрж╖ рж╣рж▓рзЗ рждрж╛ржжрзЗрж░ callback function ржПржЦрж╛ржирзЗ ржЖрж╕рзЗ, queue рждрзЗ ржЬржорзЗ ржерж╛ржХрзЗред

        FIFO (First In First Out) ржирж┐ржпрж╝ржорзЗ ржПржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ рж╣ржпрж╝ред

        Event Loop
        ЁЯСЙ Event Loop ржПрж░ ржХрж╛ржЬ рж╣рж▓рзЛ stack ржЦрж╛рж▓рж┐ ржЖржЫрзЗ ржХрж┐ржирж╛ ржжрзЗржЦрж╛ред

        ржпржжрж┐ stack ржЦрж╛рж▓рж┐ ржерж╛ржХрзЗ, рждржмрзЗ queue ржерзЗржХрзЗ callback ржирж┐ржпрж╝рзЗ stack ржП ржкрж╛ржарж╛ржпрж╝ред

        ржПржнрж╛ржмрзЗ asynchronous ржХрзЛржб main thread ржХрзЗ ржмрзНрж▓ржХ ржирж╛ ржХрж░рзЗ ржЖрж▓рж╛ржжрж╛ queue рждрзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ ржПржмржВ ржкрж░рзЗ execution stack ржП ржврзБржХрзЗ execute рж╣ржпрж╝ред

        ЁЯУК ржЙржжрж╛рж╣рж░ржг:
        console.log("Start");

        setTimeout(() => {
        console.log("Callback from setTimeout");
        }, 2000);

        console.log("End");

        Execution Flow:

        "Start" тЖТ Call stack ржП ржпрж╛ржпрж╝ тЖТ ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝ред

        setTimeout тЖТ Browser API ржП ржЪрж▓рзЗ ржпрж╛ржпрж╝ (stack ржП ржирж╛ ржерж╛ржХрзЗ)ред 2 рж╕рзЗржХрзЗржирзНржб ржкрж░ рждрж╛рж░ callback callback queue рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред

        "End" тЖТ Call stack ржП ржпрж╛ржпрж╝ тЖТ ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝ред

        2 рж╕рзЗржХрзЗржирзНржб ржкрж░ event loop ржжрзЗржЦрзЗ stack ржЦрж╛рж▓рж┐, рждрж╛ржЗ callback queue ржерзЗржХрзЗ "Callback from setTimeout" тЖТ stack ржП ржкрж╛ржарж╛ржпрж╝ тЖТ ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝ред

        ЁЯСЙ Output рж╣ржмрзЗ:

        Start
        End
        Callback from setTimeout

        ЁЯФС рж╕рж╣ржЬржнрж╛ржмрзЗ ржоржирзЗ рж░рж╛ржЦрж╛рж░ ржХрзМрж╢рж▓:

        Call Stack = ржмрж░рзНрждржорж╛ржирзЗ ржЪрж▓ржЫрзЗ ржПржоржи ржХрж╛ржЬред

        Web APIs = ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб worker (asynchronous ржХрж╛ржЬрзЗрж░ ржЬрж╛рзЯржЧрж╛)ред

        Callback Queue = pending ржХрж╛ржЬрзЗрж░ рж▓рж╛ржЗржиред

        Event Loop = ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржЧрж╛рж░рзНржб (stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ queue ржерзЗржХрзЗ ржХрж╛ржЬ ржврзБржХрж╛рзЯ)ред
 */
// function a() { 
//     console.log("A"); 
// }

// function b() { 
//     a(); 
//     console.log("B"); 
// }

// b();


/** Problem 2 from Page # 310: call stack ржПржмржВ callback queue ржПрж░ ржоржзрзНржпрзЗ Difference ржХрж┐? */

/** 
 * Answer: 
 * 
        * Call Stack ржЖрж░ Callback Queue ржжрзБржЯрзЛржЗ JavaScript execution model ржПрж░ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржЕржВрж╢, ржХрж┐ржирзНрждрзБ ржХрж╛ржЬрзЗрж░ ржзрж░ржи ржнрж┐ржирзНржиред

        ЁЯФО Difference between Call Stack and Callback Queue
        ржмрж┐рж╖рзЯ	Call Stack	Callback Queue
        рж╕ржВржЬрзНржЮрж╛	ржпрзЗржЦрж╛ржирзЗ JavaScript ржХрзЛржб (functions, statements) ржЖрж╕рж▓рзЗржЗ execute рж╣рзЯред	ржпрзЗржЦрж╛ржирзЗ asynchronous ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ рждрж╛ржжрзЗрж░ callback function ржЧрзБрж▓рзЛ ржЬржорж╛ ржерж╛ржХрзЗред
        ржзрж░ржи	Data structure: Stack (LIFO тАУ Last In First Out)	Data structure: Queue (FIFO тАУ First In First Out)
        ржХрж╛ржЬ	Function call ржЧрзБрж▓рзЛ ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ ржЪрж╛рж▓рж╛ржирзЛ ржУ рж╢рзЗрж╖ ржХрж░рж╛ред	Async ржХрж╛ржЬ (setTimeout, fetch, event ржЗрждрзНржпрж╛ржжрж┐) рж╢рзЗрж╖ рж╣рж▓рзЗ callback ржлрж╛ржВрж╢ржиржХрзЗ ржзрж░рзЗ рж░рж╛ржЦрзЗ ржпрждржХрзНрж╖ржг ржирж╛ stack ржЦрж╛рж▓рж┐ рж╣рзЯред
        Execution	рж╕рж░рж╛рж╕рж░рж┐ execute рж╣рзЯ (immediate execution)ред	рж╕рж░рж╛рж╕рж░рж┐ execute рж╣рзЯ ржирж╛ тЖТ Event Loop stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ queue ржерзЗржХрзЗ callback stack ржП ржкрж╛ржарж╛рзЯ, рждрж╛рж░ржкрж░ execute рж╣рзЯред
        ржЙржжрж╛рж╣рж░ржг	console.log("Hello") рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ call stack ржП execute рж╣ржмрзЗред	setTimeout(() => console.log("Hi"), 1000) callback queue рждрзЗ ржпрж╛ржмрзЗ 1 рж╕рзЗржХрзЗржирзНржб ржкрж░рзЗред
        ЁЯУК ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ржЗ
        console.log("1");

        setTimeout(() => {
        console.log("2");
        }, 0);

        console.log("3");

        Execution Flow:

        "1" тЖТ call stack ржП ржпрж╛рзЯ тЖТ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ execute тЖТ print рж╣рзЯред

        setTimeout тЖТ browser API ржП ржпрж╛рзЯ тЖТ 0ms ржкрж░ callback queue рждрзЗ callback (console.log("2")) ржЪрж▓рзЗ ржЖрж╕рзЗред

        "3" тЖТ call stack ржП ржпрж╛рзЯ тЖТ execute тЖТ print рж╣рзЯред

        Event Loop ржжрзЗржЦрзЗ call stack ржЦрж╛рж▓рж┐ тЖТ callback queue ржерзЗржХрзЗ "2" stack ржП ржврзЛржХрзЗ тЖТ execute рж╣рзЯред

        ЁЯСЙ Output рж╣ржмрзЗ:

        1
        3
        2


        тЬЕ рж╕ржВржХрзНрж╖рзЗржкрзЗ:

        Call Stack = ржпрзЗржЦрж╛ржирзЗ synchronous (рждрж╛рзОржХрзНрж╖ржгрж┐ржХ) ржХрзЛржб execute рж╣рзЯред

        Callback Queue = ржпрзЗржЦрж╛ржирзЗ asynchronous ржХрзЛржбрзЗрж░ callback ржЧрзБрж▓рзЛ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ, Event Loop ржПрж░ signal ржкрзЗрж▓рзЗ execute рж╣рзЯред
 */


/** Problem 3 from Page # 310: JavaScript ржпржжрж┐ Single Threaded рж╣рзЯ, рждржмрзЗ asynchronous ржХрж╛ржЬржЧрзБрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ Handle ржХрж░рзЗ? */

/** Answer: 
 * 
        * ЁЯз╡ JavaScript Single-threaded ржорж╛ржирзЗ ржХрзА?

        JavaScript engine (ржпрзЗржоржи V8) ржПржХржЯрж╛ main thread ржП ржЪрж▓рзЗ тЖТ ржпрзЗржЦрж╛ржирзЗ ржПржХржмрж╛рж░рзЗ ржПржХржЯрж╛ ржХрж╛ржЬржЗ execute рж╣рзЯред
        ржорж╛ржирзЗ: Call Stack-ржП ржПржХрж╕рж╛ржерзЗ ржПржХржЯрж╛ржЗ function execute рж╣рзЯред

        тЭУ рждрж╛рж╣рж▓рзЗ async ржХрж╛ржЬржЧрзБрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ ржЪрж▓рзЗ?

        JavaScript engine ржПржХрж╛ ржирж╛ тЖТ ржПрж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗ Browser (ржмрж╛ Node.js runtime)ред
        ржПржЦрж╛ржирзЗржЗ async ржХрж╛ржЬржЧрзБрж▓рзЛ handle рж╣рзЯред

        ЁЯСЙ ржорзВрж▓ржд Web APIs / Node APIs + Event Loop + Callback Queue ржорж┐рж▓рзЗ async ржХрж╛ржЬ manage ржХрж░рзЗред

        тЪЩя╕П Workflow (Asynchronous Handling)

        Call Stack ржП ржХрзЛржб ржЖрж╕рзЗ
        ржпрзЗржоржи:

        setTimeout(() => {
        console.log("Done!");
        }, 2000);


        Browser API / Node API ржХрзЗ ржжрзЗржУрзЯрж╛ рж╣рзЯ
        setTimeout main stack ржП run ржирж╛ рж╣рзЯрзЗ browser ржПрж░ Timer API ржП ржЪрж▓рзЗ ржпрж╛рзЯред

        Background ржП async ржХрж╛ржЬ ржЪрж▓рзЗ

        Timer ржЪрж▓рждрзЗ ржерж╛ржХрзЗ (stack ржмрзНрж▓ржХ ржХрж░рзЗ ржирж╛)ред

        Network request рж╣рж▓рзЗ browser network thread ржП request ржкрж╛ржарж╛рзЯред

        Callback Queue рждрзЗ Callback ржЬржорж╛ рж╣рзЯ
        async ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ callback ржлрж╛ржВрж╢ржи queue рждрзЗ рж░рж╛ржЦрж╛ рж╣рзЯред

        Event Loop ржХрж╛ржЬ ржирзЗрзЯ
        Event Loop рж╕ржмрж╕ржорзЯ ржжрзЗржЦрзЗ тЖТ Call Stack ржЦрж╛рж▓рж┐ ржХрж┐ржирж╛ред

        ржпржжрж┐ ржЦрж╛рж▓рж┐ ржерж╛ржХрзЗ тЖТ Callback Queue ржерзЗржХрзЗ ржХрж╛ржЬ Call Stack ржП ржкрж╛ржарж╛рзЯред

        рждржЦржи ржлрж╛ржВрж╢ржи execute рж╣рзЯред

        ЁЯУК ржЙржжрж╛рж╣рж░ржг:
        console.log("Start");

        setTimeout(() => {
        console.log("Async task done!");
        }, 2000);

        console.log("End");

        Execution Steps:

        "Start" тЖТ Call Stack тЖТ printред

        setTimeout тЖТ Browser Timer API ржП ржЪрж▓рзЗ ржпрж╛рзЯред

        "End" тЖТ Call Stack тЖТ printред

        2 рж╕рзЗржХрзЗржирзНржб ржкрж░ Timer рж╢рзЗрж╖ тЖТ callback Queue рждрзЗ callback function (console.log("Async task done!")) ржЬржорж╛ рж╣рзЯред

        Event Loop ржжрзЗржЦрзЗ Call Stack ржЦрж╛рж▓рж┐ тЖТ Callback Queue ржерзЗржХрзЗ function ржЖржирзЗ тЖТ execute тЖТ printред

        ЁЯСЙ Output:

        Start
        End
        Async task done!

        ЁЯФС Key Point

        JavaScript ржирж┐ржЬрзЗ asynchronous ржирж╛ тЖТ ржмрж░ржВ Browser/Node environment async ржХрж╛ржЬ ржХрж░рзЗ ржжрзЗрзЯред

        JS engine ржХрзЗржмрж▓ Event Loop ржПрж░ ржорж╛ржзрзНржпржорзЗ рж╕ржарж┐ржХ рж╕ржорзЯрзЗ callback execute ржХрж░рзЗред

        рждрж╛ржЗ single-threaded рж╣рж▓рзЗржУ JavaScript non-blocking asynchronous ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
 */


/** ============= The Real Type of JavaScript =========================== */

/** Explanation: JavaScript is Just In Time (JIT) compiled Language: */

/** Answer: 
 * 
        * ЁЯФ╣ JavaScript ржХрзЗржи JIT (Just In Time) Compiled Language ржмрж▓рж╛ рж╣рзЯ?

        JavaScript ржорзВрж▓ржд ржПржХржЯрж┐ interpreted language ржЫрж┐рж▓ред ржЕрж░рзНржерж╛рзО, ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ JavaScript Engine (ржпрзЗржоржи Chrome-ржПрж░ V8, Firefox-ржПрж░ SpiderMonkey, Safari-ржПрж░ JavaScriptCore ржЗрждрзНржпрж╛ржжрж┐) рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржХрзЛржб ржкрзЬрзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХржнрж╛ржмрзЗ execute ржХрж░рждред

        ржХрж┐ржирзНрждрзБ рж╢рзБржзрзБржорж╛рждрзНрж░ interpreter ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ performance ржЕржирзЗржХ slow рж╣рждред рждрж╛ржЗ ржЖржзрзБржирж┐ржХ JavaScript Engine-ржЧрзБрж▓рзЛ (ржпрзЗржоржи V8) ржПржЦржи JIT Compiler ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

        ЁЯЪА JIT Compiler ржХрж╛ржЬ ржХрж░рзЗ ржХрж┐ржнрж╛ржмрзЗ?

        Parsing (ржкрзЬрж╛)

        ржкрзНрж░ржержорзЗ JavaScript ржХрзЛржбржХрзЗ ржкрзЬрж╛ рж╣рзЯ ржПржмржВ Abstract Syntax Tree (AST) рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯред

        let x = 5;
        let y = 10;
        console.log(x + y);


        ЁЯСЙ ржЙржкрж░рзЗрж░ ржХрзЛржбржЯрж╛ ржкрзНрж░ржержорзЗ ржЯрзБржХрж░рзЛ ржЯрзБржХрж░рзЛ ржХрж░рзЗ AST рждрзИрж░рж┐ ржХрж░рзЗред

        Bytecode рждрзИрж░рж┐ (Interpreter stage)

        ржХрзЛржбржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╢рж┐ржи рж▓рзНржпрж╛ржЩрзНржЧрзБрзЯрзЗржЬрзЗ ржирж╛ ржЧрж┐рзЯрзЗ bytecode ржЖржХрж╛рж░рзЗ intermediate form-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ рж╣рзЯред

        ржПржЗ bytecode ржЗржирзНржЯрж╛рж░ржкрзНрж░рзЗржЯрж╛рж░ ржжрзНржмрж╛рж░рж╛ run рж╣рзЯред

        Profiling (Hot code ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж╛)

        JIT Compiler ржХрзЛржб рж░рж╛ржи ржХрж░рж╛рж░ рж╕ржорзЯ ржжрзЗржЦрзЗ ржХрзЛржи ржлрж╛ржВрж╢ржи/ржХрзЛржб ржмрж╛рж░ржмрж╛рж░ execute рж╣ржЪрзНржЫрзЗ (ржпрж╛ржХрзЗ ржмрж▓рзЗ hot code path)ред

        Optimized Machine Code рждрзИрж░рж┐ (Compilation stage)

        ржпрзЗржЗ ржЕржВрж╢ржЯрж╛ ржмрзЗрж╢рж┐ execute рж╣рзЯ, рж╕рзЗржЯрж╛ржХрзЗ Just In Time ржорзЗрж╢рж┐ржи ржХрзЛржбрзЗ (native CPU instructions) ржХржорзНржкрж╛ржЗрж▓ ржХрж░рзЗ ржлрзЗрж▓рзЗред

        ржПржХржмрж╛рж░ ржорзЗрж╢рж┐ржи ржХрзЛржбрзЗ ржХржорзНржкрж╛ржЗрж▓ рж╣рж▓рзЗ ржкрж░рзЗрж░ржмрж╛рж░ ржЖрж░ interpreter ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯ ржирж╛ тЖТ performance ржЕржирзЗржХ ржжрзНрж░рзБржд рж╣рзЯред

        ЁЯСЙ ржПржЗ ржХрж╛рж░ржгрзЗ JavaScript-ржХрзЗ JIT Compiled Language ржмрж▓рж╛ рж╣рзЯ тАФ ржХрж╛рж░ржг execution-ржПрж░ рж╕ржорзЯрзЗржЗ ржХрзЛржбржХрзЗ ржорзЗрж╢рж┐ржи ржХрзЛржбрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржлрзЗрж▓рж╛ рж╣рзЯред

        ЁЯФ╣ ржПржХржЯрж┐ ржЙржжрж╛рж╣рж░ржг
        function add(a, b) {
            return a + b;
        }

        for (let i = 0; i < 1000000; i++) {
            add(10, 20);
        }

        ржПржЦрж╛ржирзЗ ржХрж┐ рж╣ржЪрзНржЫрзЗ?

        рж╢рзБрж░рзБрждрзЗ add ржлрж╛ржВрж╢ржиржХрзЗ interpreter (bytecode form) ржжрж┐рзЯрзЗ execute ржХрж░рж╛ рж╣ржмрзЗред

        Engine ржжрзЗржЦржмрзЗ ржпрзЗ add ржлрж╛ржВрж╢ржи ржЕржирзЗржХржмрж╛рж░ run рж╣ржЪрзНржЫрзЗ (hot function)ред

        JIT Compiler add ржлрж╛ржВрж╢ржиржЯрж┐ржХрзЗ ржорзЗрж╢рж┐ржи ржХрзЛржбрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░ржмрзЗред

        ржПрж░ ржлрж▓рзЗ ржкрж░рзЗ ржЖрж░ interpreter ржжрж┐рзЯрзЗ ржирзЯ тЖТ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╢рж┐ржи ржХрзЛржб ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗред

        ЁЯСЙ ржПржЗ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ржЗ JavaScript-ржХрзЗ ржжрзНрж░рзБрждрждрж░ ржХрж░рзЗ рждрзЛрж▓рзЗред

        ЁЯФ╣ Interpreter ржмржирж╛ржо JIT Compiler рждрзБрж▓ржирж╛ (рж╕рж╣ржЬ ржЙржжрж╛рж╣рж░ржг)

        ржзрж░рзБржи, ржЖржкржирж┐ ржПржХржЯрж╛ ржЧрж▓рзНржк ржкрзЬржЫрзЗржиред

        Interpreter рж╣рж▓рзЛ ржПржоржи ржПржХржЬржи ржкрж╛ржаржХ, ржпрзЗ ржЧрж▓рзНржкржЯрж╛ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржкрзЬрзЗ рж╢рзЛржирж╛ржЪрзНржЫрзЗред

        Compiler (Traditional AOT) рж╣рж▓рзЛ ржПржоржи ржПржХржЬржи, ржпрзЗ ржЖржЧрзЗ ржкрзБрж░рзЛ ржмржЗржЯрж╛ ржкрзЬрзЗ ржЕржирзБржмрж╛ржж ржХрж░рзЗ рждрж╛рж░ржкрж░ рж╢рзЛржирж╛ржЪрзНржЫрзЗред

        JIT Compiler рж╣рж▓рзЛ ржПржоржи ржПржХржЬржи, ржпрзЗ рж╢рзБрж░рзБрждрзЗ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржкрзЬрзЗ рж╢рзЛржирж╛ржЪрзНржЫрзЗ, ржХрж┐ржирзНрждрзБ ржпрзЗржЗ ржЕржВрж╢ржЯрж╛ ржмрзЗрж╢рж┐ рж╢рзЛржирж╛рждрзЗ рж╣ржЪрзНржЫрзЗ, рж╕рзЗржЯрж╛ ржоржирзЗ рж░рзЗржЦрзЗ native ржнрж╛рж╖рж╛рзЯ ржмрж▓рзЗ ржжрж┐ржЪрзНржЫрзЗред

        ЁЯСЙ рждрж╛ржЗ JIT рж╣рж▓рзЛ interpreter + compiler-ржПрж░ combinationред

        ЁЯФ╣ ржмрж╛рж╕рзНрждржм ржЙржжрж╛рж╣рж░ржг (Console Test)
        console.time("normal");

        function multiply(a, b) {
        return a * b;
        }

        for (let i = 0; i < 10000000; i++) {
        multiply(5, 10);
        }

        console.timeEnd("normal");


        ЁЯСЙ ржкрзНрж░ржержо ржХрж┐ржЫрзБ рж▓рзБржк interpreter ржжрж┐рзЯрзЗ ржЪрж▓ржмрзЗред ржХрж┐ржирзНрждрзБ ржХрзЯрзЗржХ рж╣рж╛ржЬрж╛рж░ ржмрж╛рж░ ржкрж░ JIT Compiler detect ржХрж░ржмрзЗ multiply ржмрж╛рж░ржмрж╛рж░ call рж╣ржЪрзНржЫрзЗ, рждрж╛ржЗ ржПржЯрж╛ржХрзЗ machine code-ржП optimize ржХрж░ржмрзЗред ржлрж▓рзЗ рж╕ржорзЯ ржмрж╛ржБржЪржмрзЗред

        тЪб рж╕ржВржХрзНрж╖рзЗржкрзЗ:

        JavaScript ржЖржЧрзЗрж░ ржорждрзЛ pure interpreted ржирж╛ред

        ржЖржзрзБржирж┐ржХ JavaScript Engine-ржЧрзБрж▓рзЛ JIT Compiler ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

        Execution-ржПрж░ рж╕ржорзЯрзЗржЗ ржХрзЛржбржХрзЗ ржорзЗрж╢рж┐ржи ржХрзЛржбрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ тЖТ performance ржЕржирзЗржХ ржжрзНрж░рзБржд рж╣рзЯред
 */


/** Explanation: How is JavaScript a multi-paradigm language? */

/** Answer: 
 * 
        * JavaScript-ржХрзЗ multi-paradigm language ржмрж▓рж╛ рж╣рзЯ ржХрж╛рж░ржг ржПржЯрж┐ ржПржХрж╕рж╛ржерзЗ ржмрж┐ржнрж┐ржирзНржи programming style (paradigm) рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗред

        ЁЯФ╣ Paradigm ржХрзА?

        Programming Paradigm ржорж╛ржирзЗ рж╣рж▓рзЛ ржХрзЛржб рж▓рзЗржЦрж╛рж░ ржзрж░ржг ржмрж╛ ржЪрж┐ржирзНрждрж╛рж░ ржкржжрзНржзрждрж┐ред
        ржпрзЗржоржи тАФ ржХрж┐ржЫрзБ ржнрж╛рж╖рж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ object-oriented, ржХрж┐ржЫрзБ ржЖржмрж╛рж░ рж╢рзБржзрзБржорж╛рждрзНрж░ functional ржмрж╛ proceduralред

        ржХрж┐ржирзНрждрзБ JavaScript ржЕржирзЗржХржЧрзБрж▓рзЛ paradigm рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ тАФ рждрж╛ржЗ ржПржХрзЗ multi-paradigm ржмрж▓рж╛ рж╣рзЯред

        ЁЯФ╣ JavaScript ржПрж░ ржкрзНрж░ржзрж╛ржи Paradigm рж╕ржорзВрж╣
        1. Imperative / Procedural Programming

        ЁЯСЙ ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ step-by-step ржирж┐рж░рзНржжрзЗрж╢ ржжрж┐ржЗ, ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ рж╣ржмрзЗред

        let numbers = [1, 2, 3, 4];
        let doubled = [];

        for (let i = 0; i < numbers.length; i++) {
        doubled.push(numbers[i] * 2);
        }
        console.log(doubled);


        тЮбя╕П ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ рж▓рзБржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ manual ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рж╛ржЪрзНржЫрж┐ред

        2. Functional Programming

        ЁЯСЙ JavaScript first-class functions рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗред
        ржорж╛ржирзЗ function-ржХрзЗ variable-ржП рж░рж╛ржЦрж╛ ржпрж╛рзЯ, argument рж╣рж┐рж╕рзЗржмрзЗ ржкрж╛ржарж╛ржирзЛ ржпрж╛рзЯ, ржПржоржиржХрж┐ return ржХрж░рж╛ ржпрж╛рзЯред

        let numbers = [1, 2, 3, 4];
        let doubled = numbers.map(n => n * 2);
        console.log(doubled);


        тЮбя╕П ржПржЦрж╛ржирзЗ map() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ functional styleред
        тЮбя╕П Pure functions, higher-order functions, immutability JavaScript-ржП ржХрж░рж╛ ржпрж╛рзЯред

        3. Object-Oriented Programming (OOP)

        ЁЯСЙ JavaScript prototype-based рж╣рж▓рзЗржУ, ржПржЦржи ES6 ржерзЗржХрзЗ class keyword ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ OOP style рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗред

        class Person {
        constructor(name, age) {
            this.name = name;
            this.age = age;
        }

        greet() {
            console.log(`Hello, my name is ${this.name}`);
        }
        }

        let p1 = new Person("Ahkamul", 35);
        p1.greet();


        тЮбя╕П ржПржЦрж╛ржирзЗ OOP-ржПрж░ concept тАФ class, object, constructor, method тАФ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

        4. Event-Driven Programming

        ЁЯСЙ JavaScript ржЕржирзЗржХ ржмрзЗрж╢рж┐ event-driven, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ browser environment-ржПред

        document.getElementById("btn").addEventListener("click", function() {
        alert("Button clicked!");
        });


        тЮбя╕П ржПржЦрж╛ржирзЗ event (click) ржШржЯрж▓рзЗ function execute рж╣ржЪрзНржЫрзЗред

        ЁЯФ╣ ржХрзЗржи Multi-Paradigm ржмрж▓рж╛ рж╣рзЯ?

        ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ procedural style-ржП рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржиред

        ржЪрж╛ржЗрж▓рзЗ functional style-ржП рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржиред

        ржЖржмрж╛рж░ object-oriented style-ржПржУ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржиред

        Web development-ржП ржЕржирзЗржХрж╕ржорзЯ event-driven style ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

        ЁЯСЙ ржПржЗ flexibility JavaScript-ржХрзЗ multi-paradigm ржХрж░рзЗ рждрзБрж▓рзЗржЫрзЗред

        тЪб рж╕ржВржХрзНрж╖рзЗржкрзЗ:
        JavaScript рж╣рж▓рзЛ multi-paradigm language ржХрж╛рж░ржг ржПржЯрж┐ procedural, functional, object-oriented, ржПржмржВ event-driven тАФ рж╕ржм style-ржЗ рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗред
 */


/** Explanation: How is JavaScript a prototype-based language? */

/** Answer: 
 * 
        * ЁЯФ╣ Prototype ржХрзА?

        JavaScript-ржП ржкрзНрж░рждрзНржпрзЗржХржЯрж┐ object ржПрж░ рж╕рж╛ржерзЗ ржЖрж░рзЗржХржЯрж┐ ржмрж┐рж╢рзЗрж╖ object ржпрзБржХрзНржд ржерж╛ржХрзЗ ржпрж╛ржХрзЗ ржмрж▓рзЗ prototypeред
        ЁЯСЙ рж╕рзЗржЗ prototype ржерзЗржХрзЗ object ржирждрзБржи property ржмрж╛ method inherit ржХрж░рждрзЗ ржкрж╛рж░рзЗред

        ржЕрж░рзНржерж╛рзО, classical OOP languages (ржпрзЗржоржи Java, C++) ржП inheritance рж╣рзЯ class ржПрж░ ржорж╛ржзрзНржпржорзЗред
        ржХрж┐ржирзНрждрзБ JavaScript-ржП inheritance рж╣рзЯ object тЖТ object ржПрж░ ржорж╛ржзрзНржпржорзЗ, ржпрж╛ржХрзЗ ржмрж▓рзЗ prototype-based inheritanceред

        ЁЯФ╣ ржЙржжрж╛рж╣рж░ржг рзз: Simple Prototype
        let person = {
        greet: function() {
            console.log("Hello!");
        }
        };

        let student = Object.create(person);
        student.study = function() {
        console.log("I am studying");
        };

        student.greet(); // Hello!  <-- inherited from prototype (person)
        student.study(); // I am studying


        ЁЯСЙ ржПржЦрж╛ржирзЗ

        student object рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗ person ржХрзЗ prototype ржмрж╛ржирж┐рзЯрзЗред

        рждрж╛ржЗ student ржП greet() ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ ржирж╛ ржерж╛ржХрж▓рзЗржУ, рж╕рзЗ рждрж╛рж░ prototype (person) ржерзЗржХрзЗ ржкрзЗрзЯрзЗ ржпрж╛ржЪрзНржЫрзЗред

        ЁЯФ╣ Prototype Chain

        JavaScript-ржП object lookup рж╣рзЯ ржПржЗржнрж╛ржмрзЗ:

        ржкрзНрж░ржержорзЗ ржЪрж╛ржУрзЯрж╛ property/method ржирж┐ржЬ object-ржП ржЦрзБржБржЬржмрзЗред

        ржирж╛ ржкрзЗрж▓рзЗ prototype object-ржП ржЦрзБржБржЬржмрзЗред

        ржирж╛ ржкрзЗрж▓рзЗ ржЖржмрж╛рж░ рждрж╛рж░ prototype-ржП ржЦрзБржБржЬржмрзЗред
        ЁЯСЙ ржПржХрзЗ ржмрж▓рзЗ prototype chainред

        console.log(student.toString());


        ржПржЦрж╛ржирзЗ toString() student ржП ржирзЗржЗ, person ржП-ржУ ржирзЗржЗ тЖТ рждрж╛ржЗ Object.prototype ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗред

        ЁЯФ╣ ржЙржжрж╛рж╣рж░ржг рзи: Function Constructor + Prototype
        function Person(name) {
        this.name = name;
        }

        Person.prototype.sayHello = function() {
        console.log(`Hello, I am ${this.name}`);
        };

        let p1 = new Person("Ahkamul");
        let p2 = new Person("Rahim");

        p1.sayHello(); // Hello, I am Ahkamul
        p2.sayHello(); // Hello, I am Rahim


        ЁЯСЙ ржПржЦрж╛ржирзЗ

        Person function constructor ржерзЗржХрзЗ object рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗред

        sayHello рж╕рж░рж╛рж╕рж░рж┐ object ржП ржирзЗржЗ, ржмрж░ржВ Person.prototype ржП ржЖржЫрзЗред

        рждрж╛ржЗ p1 ржПржмржВ p2 ржЙржнрзЯрзЗржЗ рж╕рзЗржЗ prototype ржерзЗржХрзЗ method рж╢рзЗрзЯрж╛рж░ ржХрж░ржЫрзЗред

        ЁЯФ╣ ржЙржжрж╛рж╣рж░ржг рзй: Class (Syntactic Sugar for Prototype)

        ES6 ржерзЗржХрзЗ ржЖржорж░рж╛ class syntax ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржХрж┐ржирзНрждрзБ ржнрзЗрждрж░рзЗ рж╕ржмржХрж┐ржЫрзБржЗ prototype ржнрж┐рждрзНрждрж┐ржХред

        class Person {
        constructor(name) {
            this.name = name;
        }
        sayHello() {
            console.log(`Hello, I am ${this.name}`);
        }
        }

        let p = new Person("Lima");
        p.sayHello(); // Hello, I am Lima


        ЁЯСЙ ржпржжрж┐ржУ ржЖржорж░рж╛ class рж▓рж┐ржЦрзЗржЫрж┐, ржнрзЗрждрж░рзЗ ржЖрж╕рж▓рзЗ ржПржЯрж╛ Person.prototype.sayHello ржПрж░ ржорждрзЛ ржХрж░рзЗржЗ ржХрж╛ржЬ ржХрж░ржЫрзЗред

        ЁЯФ╣ ржХрзЗржи JavaScript Prototype-based Language?

        Inheritance рж╣рзЯ object ржерзЗржХрзЗ object (class ржирзЯ)ред

        ржкрзНрж░рждрзНржпрзЗржХ object-ржПрж░ рж╕рж╛ржерзЗ prototype ржпрзБржХрзНржд ржерж╛ржХрзЗред

        Property/method ржирж╛ ржкрзЗрж▓рзЗ search рж╣рзЯ prototype chain ржзрж░рзЗред

        ES6 class syntax ржЖрж╕рж▓рзЗржУ, ржнрзЗрждрж░рзЗ ржЖрж╕рж▓ inheritance ржПржЦржиржУ prototype-ржПрж░ ржУржкрж░ ржирж┐рж░рзНржнрж░рж╢рзАрж▓ред

        тЪб рж╕ржВржХрзНрж╖рзЗржкрзЗ:
        JavaScript рж╣рж▓рзЛ prototype-based language ржХрж╛рж░ржг ржПржЯрж┐ inheritance ржХрж░рж╛рж░ ржЬржирзНржп class ржирзЯ, ржмрж░ржВ prototype (object-to-object link) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред
 */



/** Problem 1 from Page # 312: How does JavaScript run codes? */

/** Answer: 
 * 
        * ЁЯФ╣ Step by Step Execution Process

        JavaScript ржХрзЛржб browser (ржпрзЗржоржи Chrome-ржПрж░ V8 engine) ржмрж╛ runtime (ржпрзЗржоржи Node.js) ржПрж░ ржнрзЗрждрж░рзЗржЗ execute рж╣рзЯред
        ржПржХржЯрж╛ ржХрзЛржб рж░рж╛ржи рж╣ржУрзЯрж╛рж░ рж╕ржорзЯ ржкрзНрж░ржзрж╛ржиржд рзкржЯрж╛ ржзрж╛ржкрзЗ ржХрж╛ржЬ рж╣рзЯ:

        1. Parsing (ржХрзЛржб ржкрзЬрж╛ ржУ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг)

        JS engine рж╕рзЛрж░рзНрж╕ ржХрзЛржбржХрзЗ token ржП ржнрзЗржЩрзЗ ржирзЗрзЯред

        рждрж╛рж░ржкрж░ рж╕рзЗржЧрзБрж▓рзЛ ржерзЗржХрзЗ Abstract Syntax Tree (AST) ржмрж╛ржирж╛рзЯред
        ЁЯСЙ ржПржЯрж╛ рж╣рж▓рзЛ ржХрзЛржбрзЗрж░ ржПржХржЯрж┐ ржЧржаржиржорзВрж▓ржХ representationред

        2. Compilation (JIT Compiler)

        Engine AST ржерзЗржХрзЗ bytecode ржмрж╛ржирж╛рзЯред

        Execution-ржПрж░ рж╕ржорзЯ hot code (ржпрзЗ ржХрзЛржб ржмрж╛рж░ржмрж╛рж░ ржЪрж▓рзЗ) detect ржХрж░рзЗ рж╕рзЗржЯрж╛ржХрзЗ Just-In-Time (JIT) Compiler machine code ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗред
        ЁЯСЙ ржПрж░ ржлрж▓рзЗ ржХрзЛржб ржЕржирзЗржХ ржжрзНрж░рзБржд ржЪрж▓рзЗред

        3. Execution Context рждрзИрж░рж┐

        ржкрзНрж░рждрзНржпрзЗржХржмрж╛рж░ ржХрзЛржирзЛ script/function рж░рж╛ржи рж╣рж▓рзЗ engine ржПржХржЯрж╛ Execution Context ржмрж╛ржирж╛рзЯред

        Execution Context ржП ржерж╛ржХрзЗ:

        Variable Environment тЖТ variables, functions ржХрзЛржерж╛рзЯ stored ржерж╛ржХржмрзЗред

        Lexical Environment тЖТ scope chain / nested function contextред

        this bindingред

        ЁЯСЙ рж╢рзБрж░рзБрждрзЗ ржПржХржЯрж╛ Global Execution Context рждрзИрж░рж┐ рж╣рзЯ, рждрж╛рж░ржкрж░ function call рж╣рж▓рзЗ ржирждрзБржи context stack-ржП ржврзЛржХрзЗред

        4. Call Stack ржжрж┐рзЯрзЗ ржЪрж╛рж▓рж╛ржирзЛ

        JavaScript ржПржХржЯрж╛ Single-Threaded Languageред

        ржорж╛ржирзЗ ржПржХржмрж╛рж░рзЗ ржПржХржЯрж╛ ржХрж╛ржЬржЗ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

        рж╕ржм ржХрж╛ржЬ рж░рж╛ржЦрж╛ рж╣рзЯ ржПржХржЯрж╛ data structure-ржП ржпрж╛ржХрзЗ ржмрж▓рзЗ Call Stackред

        ржпржЦржи function call рж╣рзЯ, рж╕рзЗржЯрж╛ stack-ржПрж░ ржЙржкрж░рзЗ push рж╣рзЯред ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ stack ржерзЗржХрзЗ pop рж╣рзЯред

        ЁЯФ╣ Example Walkthrough
        console.log("Start");

        function greet(name) {
        console.log("Hello " + name);
        }

        greet("Ahkamul");

        console.log("End");


        ЁЯСЙ Execution Flow:

        Global Execution Context рждрзИрж░рж┐ рж╣рж▓рзЛред

        console.log("Start") stack ржП ржЧрзЗрж▓ тЖТ print ржХрж░рж▓ тЖТ pop рж╣рзЯрзЗ ржЧрзЗрж▓ред

        greet("Ahkamul") call рж╣рж▓рзЛ тЖТ ржирждрзБржи execution context рждрзИрж░рж┐ рж╣рж▓рзЛ тЖТ stack ржП push рж╣рж▓рзЛред

        ржнрж┐рждрж░рзЗ ржЧрж┐рзЯрзЗ "Hello Ahkamul" print ржХрж░рж▓ред

        function рж╢рзЗрж╖ тЖТ context pop рж╣рзЯрзЗ ржЧрзЗрж▓ред

        ржЖржмрж╛рж░ console.log("End") stack ржП ржЧрзЗрж▓ тЖТ print ржХрж░рж▓ тЖТ pop рж╣рж▓рзЛред

        Stack empty тЖТ program рж╢рзЗрж╖ред

        ЁЯФ╣ Asynchronous Code ржХрж┐ржнрж╛ржмрзЗ ржЪрж▓рзЗ? (Event Loop)

        JavaScript single-threaded рж╣рж▓рзЗржУ asynchronous ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗ (setTimeout, fetch ржЗрждрзНржпрж╛ржжрж┐)ред
        ЁЯСЙ ржПрж░ ржкрзЗржЫржирзЗ Event Loop ржПржмржВ Callback Queue ржХрж╛ржЬ ржХрж░рзЗред

        Flow:

        Long running task (ржпрзЗржоржи setTimeout) ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ Web API-рждрзЗ ржЪрж▓рзЗ ржпрж╛рзЯред

        рж╢рзЗрж╖ рж╣рж▓рзЗ рждрж╛рж░ callback callback queue рждрзЗ ржЖрж╕рзЗред

        Event loop call stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ queue ржерзЗржХрзЗ callback ржирж┐рзЯрзЗ ржЖрж╕рзЗред

        ржлрж▓рзЗ asynchronous ржХрж╛ржЬржУ single-threaded model ржП handle рж╣рзЯред

        ЁЯФ╣ рж╕ржВржХрзНрж╖рзЗржкрзЗ:

        JavaScript ржХрзЛржб ржЪрж╛рж▓рж╛ржирзЛрж░ ржзрж╛ржкржЧрзБрж▓рзЛ рж╣рж▓рзЛ тАУ

        Parsing тЖТ ржХрзЛржб ржкрзЬрж╛ред

        Compilation (JIT) тЖТ bytecode/machine code ржП рж░рзВржкрж╛ржирзНрждрж░ред

        Execution Context рждрзИрж░рж┐ тЖТ variables, scope ржЗрждрзНржпрж╛ржжрж┐ рж╕рзЗржЯ ржХрж░рж╛ред

        Call Stack ржжрж┐рзЯрзЗ рж░рж╛ржи тЖТ synchronous ржХрж╛ржЬржЧрзБрж▓рзЛ stack ржП push/pop рж╣рзЯред

        Event Loop + Callback Queue тЖТ asynchronous ржХрж╛ржЬ manage ржХрж░рзЗред
 */


/** Problem 2 from Page # 312: What is JavaScript? */

/** Answer: 
 * 
        * ЁЯФ╣ JavaScript ржХрзА?

        JavaScript (JS) рж╣рж▓рзЛ ржПржХржЯрж┐ high-level, interpreted, JIT-compiled, multi-paradigm programming language ржпрзЗржЯрж╛ ржорзВрж▓ржд ржУрзЯрзЗржм ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржЪрж▓рж╛рж░ ржЬржирзНржп рждрзИрж░рж┐ рж╣рзЯрзЗржЫрж┐рж▓ред

        ЁЯСЙ ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж░рж╛ ржУрзЯрзЗржмрж╕рж╛ржЗржЯржХрзЗ interactive, dynamic ржПржмржВ responsive ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

        ЁЯФ╣ ржорзВрж▓ ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣

        Client-Side Language (Browser ржП ржЪрж▓рзЗ)

        рж╢рзБрж░рзБрждрзЗ JavaScript рждрзИрж░рж┐ рж╣рзЯрзЗржЫрж┐рж▓ рж╢рзБржзрзБ ржУрзЯрзЗржм ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ client-side scripting ржПрж░ ржЬржирзНржпред

        ржПржЦржи Node.js ржПрж░ ржХрж╛рж░ржгрзЗ ржПржЯрж╛ server-side ржПржУ ржЪрж▓рзЗред

        High-Level Language

        ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж╛рж░рзЗрж░ ржЬржирзНржп рж▓рзЗржЦрж╛ рж╕рж╣ржЬред

        ржорзЗржорзЛрж░рж┐ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржмрж╛ рж▓рзЛ-рж▓рзЗржнрзЗрж▓ ржХрж╛ржЬ ржХрж░рждрзЗ рж╣рзЯ ржирж╛ред

        Dynamically Typed

        Variable ржбрж┐ржХрзНрж▓рзЗрзЯрж╛рж░ ржХрж░рж╛рж░ рж╕ржорзЯ ржбрж╛ржЯрж╛ ржЯрж╛ржЗржк ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржжрж┐рждрзЗ рж╣рзЯ ржирж╛ред

        let x = 5;       // number
        x = "Hello JS";  // string


        Single-Threaded + Asynchronous

        JavaScript ржПржХрж╕рж╛ржерзЗ ржПржХржЯрж┐ржорж╛рждрзНрж░ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗ (single-threaded)ред

        рждржмрзЗ asynchronous programming (Event Loop, Callback, Promises, async/await) ржПрж░ ржорж╛ржзрзНржпржорзЗ non-blocking ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

        Prototype-Based & Object-Oriented

        JS-ржП inheritance рж╣рзЯ prototype chain ржПрж░ ржорж╛ржзрзНржпржорзЗред

        Class syntax ржерж╛ржХрж▓рзЗржУ ржнрзЗрждрж░рзЗ рж╕ржмржЗ prototypeред

        Multi-Paradigm Language

        JavaScript ржжрж┐рзЯрзЗ ржЖржкржирж┐ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░ржмрзЗржи тАФ

        Procedural ржХрзЛржб

        Object-Oriented ржХрзЛржб

        Functional Programming рж╕рзНржЯрж╛ржЗрж▓

        Interpreted + JIT Compiled

        Engine ржХрзЛржбржХрзЗ ржЖржЧрзЗ parse ржХрж░рзЗ interpreter ржПрж░ ржорждрзЛ ржЪрж╛рж▓рж╛рзЯред

        ржмрж╛рж░ржмрж╛рж░ ржЪрж▓рж╛ ржХрзЛржбржХрзЗ JIT Compiler ржжрж┐рзЯрзЗ machine code ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ тЖТ ржлрж▓рзЗ ржжрзНрж░рзБржд ржЪрж▓рзЗред

        ЁЯФ╣ ржХрзЛржерж╛рзЯ ржХрзЛржерж╛рзЯ JavaScript ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ?

        Web Development (Frontend)

        Browser ржП ржУрзЯрзЗржмрж╕рж╛ржЗржЯржХрзЗ dynamic ржХрж░рж╛ред

        Framework: React, Angular, Vue.

        Web Development (Backend)

        Node.js ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ server-side ржХрж╛ржЬред

        Framework: Express.js, NestJS.

        Mobile App Development

        React Native, Ionic ржЗрждрзНржпрж╛ржжрж┐ ржжрж┐рзЯрзЗ mobile apps рждрзИрж░рж┐ред

        Desktop App Development

        Electron.js ржжрж┐рзЯрзЗ cross-platform desktop app (ржпрзЗржоржи VS Code, Slack)ред

        Game Development

        Phaser.js, Three.js ржжрж┐рзЯрзЗ browser gamesред

        Machine Learning & Data Science

        TensorFlow.js, Brain.js ржЗрждрзНржпрж╛ржжрж┐ ржжрж┐рзЯрзЗред

        ЁЯФ╣ рж╕рж╣ржЬ ржЙржжрж╛рж╣рж░ржг
        // Variable ржПржмржВ Function
        let name = "Ahkamul";

        function greet(user) {
        console.log("Hello, " + user + "!");
        }

        greet(name); 
        // Output: Hello, Ahkamul!


        ЁЯСЙ ржПржЗ ржЫрзЛржЯрзНржЯ ржХрзЛржб ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ ржпрж╛ржЪрзНржЫрзЗ JavaScript ржЦрзБржм рж╕рж╣ржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯред

        тЪб рж╕ржВржХрзНрж╖рзЗржкрзЗ:
        JavaScript рж╣рж▓рзЛ ржУрзЯрзЗржмрзЗрж░ programming languageред
        ржПржЯрж╛ ржжрж┐рзЯрзЗ browser, server, mobile app, desktop app ржПржоржиржХрж┐ AI project-ржУ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯред
        ржЖржЬржХрзЗрж░ ржжрж┐ржирзЗ JavaScript ржЫрж╛рзЬрж╛ ржУрзЯрзЗржм ржХрж▓рзНржкржирж╛ ржХрж░рж╛ ржпрж╛рзЯ ржирж╛ред
 */


/** Problem 3 from Page # 312: Please write a flowchart to understand JIT compiled process in JavaScript: */

/** Answer: 
 * 
        * JavaScript Engine (ржпрзЗржоржи Chrome-ржПрж░ V8) ржПрж░ ржнрзЗрждрж░рзЗ JIT (Just-In-Time) Compilation process ржмрзЛржЭрж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ Flowchart ржмрж╛ржирж╛ржирзЛ ржпрж╛ржХред

        ЁЯФ╣ Flowchart (Text-Based Representation)
                тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
                тФВ   JavaScript Code  тФВ
                тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ
                        тФВ
                        тЦ╝
                тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
                тФВ   Parsing          тФВ
                тФВ (AST рждрзИрж░рж┐ рж╣рзЯ)      тФВ
                тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ
                        тФВ
                        тЦ╝
                тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
                тФВ   Interpreter      тФВ
                тФВ Bytecode рж░рж╛ржи ржХрж░рзЗ  тФВ
                тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ
                        тФВ
                Hot code?тФВ
                (ржмрж╛рж░ржмрж╛рж░ рж░рж╛ржи рж╣ржЪрзНржЫрзЗ?) 
                тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФ┤тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
                тФВ                    тФВ
                тЦ╝                    тЦ╝
        тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР   тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
        тФВ   ржирж╛ (No)          тФВ   тФВ   рж╣рзНржпрж╛ржБ (Yes)             тФВ
        тФВ Bytecode ржжрж┐рзЯрзЗржЗ рж░рж╛ржи тФВ   тФВ   JIT Compiler ржП ржкрж╛ржарж╛ржирзЛ   тФВ
        тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ   тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ
                тФВ                          тФВ
                тЦ╝                          тЦ╝
        тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР     тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
        тФВ  Output Generate   тФВ     тФВ Machine Code ржП рж░рзВржкрж╛ржирзНрждрж░  тФВ
        тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ     тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФмтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ
                тФВ                          тФВ
                тЦ╝                          тЦ╝
            тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
            тФВ Machine Code ржерзЗржХрзЗ Output тФВ
            тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

        ЁЯФ╣ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛

        JavaScript Code тЖТ Engine ржХрзЛржб ржирзЗрзЯред

        Parsing тЖТ Tokenize ржХрж░рзЗ AST (Abstract Syntax Tree) ржмрж╛ржирж╛рзЯред

        Interpreter тЖТ AST ржерзЗржХрзЗ Bytecode ржмрж╛ржирж┐рзЯрзЗ ржЪрж╛рж▓рж╛рзЯред

        Hot Code Detection тЖТ ржХрзЛржи function/loop ржмрж╛рж░ржмрж╛рж░ ржЪрж▓ржЫрзЗ рж╕рзЗржЯрж╛ detect ржХрж░рзЗред

        JIT Compiler тЖТ Hot code ржХрзЗ machine code ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗред

        Execution тЖТ ржкрж░рзЗ рж╕рзЗржЗ machine code ржерзЗржХрзЗ output ржЖрж╕рзЗ (ржжрзНрж░рзБржд performance)ред
 */ 


/** Problem 4 from Page # 312: How are memory management and garbage collection process worked in JavaScript? */

/** Answer: 
 * 
        * JavaScript-ржП memory management ржПржмржВ garbage collection рж╣рж▓рзЛ ржПржХрзЗржмрж╛рж░рзЗ ржнрж┐рждрж░рзЗрж░ (internal) ржХрж╛ржЬ, ржпрзЗржЯрж╛ programmer рж╕рж░рж╛рж╕рж░рж┐ handle ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред ржХрж┐ржирзНрждрзБ conceptally ржХрж┐ржнрж╛ржмрзЗ рж╣рзЯ рж╕рзЗржЯрж╛ ржмрзБржЭрзЗ рж░рж╛ржЦрж╛ ржЦрзБржм ржЬрж░рзБрж░рж┐ред

        ЁЯФ╣ Memory Management in JavaScript

        JavaScript ржПржХржЯрж┐ high-level language тЖТ рждрж╛ржЗ memory allocation/deallocation рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ engine (ржпрзЗржоржи V8) handle ржХрж░рзЗред

        1. Memory Allocation (ржорзЗржорзЛрж░рж┐ ржмрж░рж╛ржжрзНржж)

        ржпржЦржи ржЖржорж░рж╛ variable, object, function ржЗрждрзНржпрж╛ржжрж┐ declare ржХрж░рж┐, рждржЦржи JavaScript Engine memory allocate ржХрж░рзЗ:

        let num = 10;             // primitive (stack memory)
        let person = {name: "A"}; // object (heap memory)


        Primitive Values (number, string, boolean, null, undefined, symbol, bigint)
        тЖТ рж╕рж╛ржзрж╛рж░ржгржд stack memory рждрзЗ рж░рж╛ржЦрж╛ рж╣рзЯред

        Objects, Arrays, Functions
        тЖТ heap memory рждрзЗ stored рж╣рзЯ, ржХрж╛рж░ржг ржПржЧрзБрж▓рзЛ dynamic size ржПрж░ рж╣рждрзЗ ржкрж╛рж░рзЗред

        2. Memory Usage

        ржпржЦржи ржХрзЛржирзЛ function call рж╣рзЯ, рждржЦржи рждрж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ execution context ржПржмржВ stack frame рждрзИрж░рж┐ рж╣рзЯред

        Function рж╢рзЗрж╖ рж╣рж▓рзЗ stack ржерзЗржХрзЗ pop рж╣рзЯрзЗ ржпрж╛рзЯред

        ржХрж┐ржирзНрждрзБ heap ржП рждрзИрж░рж┐ object ржЧрзБрж▓рзЛ рждржЦржиржУ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ (ржпржжрж┐ reference ржерзЗржХрзЗ ржпрж╛рзЯ)ред

        ЁЯФ╣ Garbage Collection in JavaScript

        Garbage collection ржорж╛ржирзЗ рж╣рж▓рзЛ тАФ
        ржпрзЗ memory ржЖрж░ ржХрзЛржирзЛ reference ржжрзНржмрж╛рж░рж╛ ржмрзНржпржмрж╣рж╛рж░ рж╣ржЪрзНржЫрзЗ ржирж╛, рж╕рзЗржЯрж╛ржХрзЗ ржлрж╛ржБржХрж╛ ржХрж░рзЗ ржжрзЗржУрзЯрж╛ред

        JavaScript-ржП garbage collector рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ тЖТ ржЕрж░рзНржерж╛рзО unused memory free ржХрж░рзЗ ржжрзЗрзЯред

        тЬЕ Garbage Collection Algorithm

        рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рзГржд technique рж╣рж▓рзЛ Mark-and-Sweep Algorithmред

        ржзрж╛ржкржЧрзБрж▓рзЛ:

        Roots (Global objects ржпрзЗржоржи window, globalThis) ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рж╛ рж╣рзЯред

        Garbage Collector mark ржХрж░рзЗ ржХрзЛржи ржХрзЛржи object ржПржЦржирзЛ reference ржжрзНржмрж╛рж░рж╛ accessibleред

        ржпрзЗржЧрзБрж▓рзЛ accessible ржирзЯ, рж╕рзЗржЧрзБрж▓рзЛ sweep ржХрж░рзЗ (ржЕрж░рзНржерж╛рзО memory free ржХрж░рзЗ)ред

        ЁЯФ╣ Example 1: Simple Reference
        let person = {
        name: "Ahkamul"
        };

        // ржПржЦржи person object heap ржП ржЖржЫрзЗ
        person = null; // reference ржХрзЗржЯрзЗ ржЧрзЗржЫрзЗ
        // тЬЕ Garbage Collector ржПржЯрж╛ржХрзЗ sweep ржХрж░рзЗ memory free ржХрж░ржмрзЗ

        ЁЯФ╣ Example 2: Circular Reference Problem (Automatically handled in JS)
        function createCycle() {
        let obj1 = {};
        let obj2 = {};

        obj1.ref = obj2;
        obj2.ref = obj1;
        return obj1;
        }

        let cycle = createCycle();
        cycle = null;
        // тЬЕ ржпржжрж┐ржУ obj1 ржПржмржВ obj2 ржПржХрзЗ ржЕржкрж░ржХрзЗ reference ржХрж░ржЫрзЗ,
        // рждржмрзБржУ global ржерзЗржХрзЗ ржЖрж░ ржХрзЛржирзЛ reference ржирзЗржЗ тЖТ рждрж╛ржЗ garbage collector sweep ржХрж░ржмрзЗред

        ЁЯФ╣ Summary

        Memory Allocation

        Primitive тЖТ stack

        Object/Array/Function тЖТ heap

        Garbage Collection

        JavaScript automatic memory management ржХрж░рзЗред

        Unreachable object detect ржХрж░рзЗ remove ржХрж░рзЗред

        ржкрзНрж░ржзрж╛ржиржд Mark-and-Sweep algorithm ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

        тЪб рж╕ржВржХрзНрж╖рзЗржкрзЗ:
        JavaScript programmer-ржХрзЗ memory manage ржХрж░рждрзЗ рж╣рзЯ ржирж╛ тЖТ engine ржирж┐ржЬрзЗ ржерзЗржХрзЗржЗ allocate ржХрж░рзЗ ржПржмржВ garbage collection ржПрж░ ржорж╛ржзрзНржпржорзЗ free ржХрж░рзЗред рждржмрзЗ reference ржзрж░рзЗ рж░рж╛ржЦрж▓рзЗ (memory leak) рж╕ржорж╕рзНржпрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред
 */
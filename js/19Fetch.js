/** API - Application Programming Interface */

// const url = `https://jsonplaceholder.typicode.com/users`;
const url = `https://jsonplaceholder.typicode.com/usersssssssssssssss`;

fetch (url)
    .then (response => response.json ())
    .then (data => showData (data))
    .catch (error => console.log (error));


const showData = tata => {
    // console.log (tata [1].id);
    // console.log (tata [0].name); 
}

/** Problem 1 from Page # 326: fetch ржлрж╛ржВрж╢ржи ржерзЗржХрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ ржкрзНрж░ржорж┐ржЬрзЗрж░ ржорж╛ржзрзНржпржорзЗ response.json() ржХрж▓ ржХрж░рзЗ, ржбрж╛ржЯрж╛ ржХржиржнрж╛рж░рзНржЯ ржХрзЗржи ржХрж░рж╛ рж╣рзЯ?  */

/** Answer: 
 * 
        * fetch() ржлрж╛ржВрж╢ржи рж╕ржмрж╕ржорзЯ ржПржХржЯрж┐ Promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред ржПржЗ Promise resolve рж╣рж▓рзЗ ржЖржорж░рж╛ ржПржХржЯрж┐ Response object ржкрж╛ржЗред ржПржЦржи ржорзВрж▓ ржмрзНржпрж╛ржкрж╛рж░ рж╣рж▓рзЛ:

        рзз. Response object ржЖрж╕рж▓рзЗ ржХрзА ржерж╛ржХрзЗ?

        ржПржЯрж╛ ржХрзЗржмрж▓ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржЖрж╕рж╛ raw HTTP response ржзрж╛рж░ржг ржХрж░рзЗ (header, status code, body ржЗрждрзНржпрж╛ржжрж┐)ред

        body рж╕рж╛ржзрж╛рж░ржгржд рж╕рзНржЯрзНрж░рж┐ржВ (text stream) ржЖржХрж╛рж░рзЗ ржерж╛ржХрзЗред

        рзи. ржХрзЗржи response.json() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐?

        response.json() ржЖрж╕рж▓рзЗ ржЖрж░рзЗржХржЯрж╛ Promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ, ржпрж╛ response body (raw text) ржХрзЗ JavaScript object/array ржП parse ржХрж░рзЗред

        рж╕рж╛рж░рзНржнрж╛рж░ ржпржжрж┐ JSON ржлрж░ржорзНржпрж╛ржЯрзЗ ржбрж╛ржЯрж╛ ржкрж╛ржарж╛рзЯ (ржпрзЗржоржи API ржерзЗржХрзЗ), рждржЦржи рж╕рж░рж╛рж╕рж░рж┐ raw ржЯрзЗржХрзНрж╕ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЭрж╛ржорзЗрж▓рж╛ржкрзВрж░рзНржгред

        рждрж╛ржЗ ржЖржорж░рж╛ JSON parse ржХрж░рж┐ ржпрж╛рждрзЗ рж╕рж╣ржЬрзЗ JavaScript ржП ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

        рзй. ржЙржжрж╛рж╣рж░ржг
        fetch("https://jsonplaceholder.typicode.com/posts/1")
        .then(response => {
            console.log(response); // ЁЯСЙ Raw Response object
            return response.json(); // ЁЯСЙ JSON ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛
        })
        .then(data => {
            console.log(data); // ЁЯСЙ JS object/array, рж╕рж╣ржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп
        })
        .catch(error => console.error(error));


        ЁЯУМ ржПржЦрж╛ржирзЗ response.json() ржирж╛ рж▓рж┐ржЦрж▓рзЗ ржЖржорж░рж╛ ржХрзЗржмрж▓ raw response ржкрж╛ржмрзЛ, ржХрж┐ржирзНрждрзБ JavaScript ржЕржмржЬрзЗржХрзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржбрж╛ржЯрж╛ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЛ ржирж╛ред

        рзк. ржЖрж░рзЗржХржЯрзБ ржХрзНрж▓рж┐рзЯрж╛рж░ржнрж╛ржмрзЗ

        response.text() тЖТ body ржХрзЗ plain string ржмрж╛ржирж╛рзЯред

        response.json() тЖТ body ржХрзЗ JS object/array ржмрж╛ржирж╛рзЯред

        response.blob() тЖТ body ржХрзЗ binary data ржмрж╛ржирж╛рзЯ (ржпрзЗржоржи ржЗржорзЗржЬ ржбрж╛ржЙржирж▓рзЛржбрзЗ)ред

        ЁЯСЙ рж╕рзЛржЬрж╛ ржХржерж╛рзЯ:
        response.json() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ ржХрж╛рж░ржг рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржЖрж╕рж╛ ржбрж╛ржЯрж╛ JSON format (text) ржП ржерж╛ржХрзЗ, ржЖрж░ ржЖржорж╛ржжрзЗрж░ ржжрж░ржХрж╛рж░ рж╕рзЗржЯрж╛ JavaScript object ржЖржХрж╛рж░рзЗред
 */


/** Problem 2 from Page # 326: fetch ржХрзЗржи ржЗржЙржЬ ржХрж░рж╛ рж╣рзЯ?  */

/**
 * Answer
 * 
        * fetch() ржорзВрж▓ржд JavaScript ржПрж░ ржПржХржЯрж┐ built-in function, ржпрзЗржЯрж╛ ржжрж┐рзЯрзЗ ржЖржорж░рж╛ HTTP request ржкрж╛ржарж╛ржЗ ржПржмржВ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржбрж╛ржЯрж╛ ржЖржирж┐ ржмрж╛ ржкрж╛ржарж╛ржЗред

        ЁЯФС ржХрзЗржи fetch() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ?

        ржбрж╛ржЯрж╛ ржЖржирж╛рж░ ржЬржирзНржп (Get request)

        ржХрзЛржирзЛ API ржерзЗржХрзЗ JSON ржбрж╛ржЯрж╛, ржЯрзЗржХрзНрж╕ржЯ, ржЫржмрж┐ ржмрж╛ ржлрж╛ржЗрж▓ ржЖржирж╛рж░ ржЬржирзНржпред

        ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп (Post/Put/Delete request)

        рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржирждрзБржи ржбрж╛ржЯрж╛ ржкрж╛ржарж╛рждрзЗ (ржпрзЗржоржи ржлрж░рзНржо рж╕рж╛ржмржорж┐ржЯ ржХрж░рж╛), ржмрж╛ ржЖржЧрзЗрж░ ржбрж╛ржЯрж╛ ржЖржкржбрзЗржЯ/ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗред

        Modern ржУ рж╕рж╣ржЬ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕

        ржЖржЧрзЗрж░ ржжрж┐ржирзЗ XMLHttpRequest (XHR) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рждрзЛ, ржпрзЗржЯрж╛ ржЬржЯрж┐рж▓ ржЫрж┐рж▓ред

        fetch() ржЕржирзЗржХ рж╕рж╣ржЬ, Promise-based, рждрж╛ржЗ asynchronous ржХрзЛржб рж▓рзЗржЦрж╛ рж╕рж╣ржЬред

        Asynchronous ржХрж╛ржЬ ржХрж░рж╛ ржпрж╛рзЯ

        fetch() promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ, рждрж╛ржЗ .then() ржмрж╛ async/await ржжрж┐рзЯрзЗ рж╕рж╣ржЬрзЗ asynchronous ржХрзЛржб рж▓рзЗржЦрж╛ ржпрж╛рзЯред

        Flexible

        рж╢рзБржзрзБ ржбрж╛ржЯрж╛ ржЖржирж╛ ржирж╛, request header, authentication token, JSON body ржЗрждрзНржпрж╛ржжрж┐ржУ ржкрж╛ржарж╛ржирзЛ ржпрж╛рзЯред

        ЁЯУЭ ржЙржжрж╛рж╣рж░ржг рзз: ржбрж╛ржЯрж╛ ржЖржирж╛ (GET request)
        fetch("https://jsonplaceholder.typicode.com/posts/1")
        .then(response => response.json())   // JSON ржП ржХржиржнрж╛рж░рзНржЯ
        .then(data => console.log(data))     // ржбрж╛ржЯрж╛ ржмрзНржпржмрж╣рж╛рж░
        .catch(error => console.error("Error:", error));

        ЁЯУЭ ржЙржжрж╛рж╣рж░ржг рзи: ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржирзЛ (POST request)
        fetch("https://jsonplaceholder.typicode.com/posts", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            title: "Hello",
            body: "This is a test post",
            userId: 1
        })
        })
        .then(response => response.json())
        .then(data => console.log("Saved:", data))
        .catch(error => console.error("Error:", error));

        ЁЯСЙ рж╕рзЛржЬрж╛ ржХржерж╛рзЯ:

        fetch() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ (client тЖФ server) тАФ

        ржбрж╛ржЯрж╛ ржЖржирж╛

        ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржирзЛ

        API ржХрж▓ ржХрж░рж╛

        ржУрзЯрзЗржм ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржиржХрзЗ dynamic ржУ interactive ржХрж░рж╛
 */


/** Problem 3 from Page # 326: fetch ржЖрж░ ржкрзНрж░ржорж┐ржЬрзЗрж░ ржоржзрзНржпрзЗ ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржХрж┐?  */

/**
 * Answer:
 * 
        * ЁЯФС ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп
        рзз. Promise ржХрзА?

        Promise рж╣рж▓рзЛ JavaScript ржПрж░ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ ржпрж╛ asynchronous ржХрж╛ржЬ (ржпрзЗржоржи рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржбрж╛ржЯрж╛ ржЖржирж╛, ржлрж╛ржЗрж▓ ржкрзЬрж╛, ржЯрж╛ржЗржорж╛рж░ ржЗрждрзНржпрж╛ржжрж┐) рж╢рзЗрж╖ рж╣рж▓рзЗ success ржмрж╛ failure рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред

        ржПржЯрж╛ ржХрзЗржмрж▓ ржПржХржЯрж╛ ржзрж╛рж░ржгрж╛/ржорзЗржХрж╛ржирж┐ржЬржо asynchronous ржЕржкрж╛рж░рзЗрж╢ржи рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржпред

        ЁЯСЙ ржЙржжрж╛рж╣рж░ржг:

        const myPromise = new Promise((resolve, reject) => {
        let success = true;

        if (success) {
            resolve("Data found!");
        } else {
            reject("Error occurred!");
        }
        });

        myPromise
        .then(result => console.log(result))
        .catch(error => console.log(error));

        рзи. fetch() ржХрзА?

        fetch() рж╣рж▓рзЛ ржПржХржЯрж╛ built-in function (browser API), ржпрзЗржЯрж╛ HTTP request ржкрж╛ржарж╛рждрзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

        fetch() ржпржЦржи ржХрж▓ ржХрж░рж╛ рж╣рзЯ, ржПржЯрж╛ ржПржХржЯрж╛ Promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

        рждрж╛ржЗ fetch() ржЖрж╕рж▓рзЗ Promise ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХрж╛ржЬ ржХрж░рзЗред

        ЁЯСЙ ржЙржжрж╛рж╣рж░ржг:

        fetch("https://jsonplaceholder.typicode.com/posts/1")
        .then(response => response.json()) // JSON ржП ржХржиржнрж╛рж░рзНржЯ
        .then(data => console.log(data))
        .catch(error => console.log(error));

        ЁЯЖЪ ржкрж╛рж░рзНржержХрзНржп (Comparison Table)
        ржмрж┐рж╖рзЯ	Promise	fetch()
        ржХрзА?	ржПржХржЯрж┐ JavaScript object (async ржХрж╛ржЬ ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржЯрзБрж▓)	ржПржХржЯрж┐ function (browser API)
        ржХрж╛ржЬ	Asynchronous ржХрж╛ржЬрзЗрж░ success/failure рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛	HTTP request ржкрж╛ржарж╛ржирзЛ ржУ response ржкрж╛ржУрзЯрж╛
        Relation	Base mechanism	fetch рж╕ржмрж╕ржорзЯ Promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
        ржмрзНржпржмрж╣рж╛рж░	Timer, file read, DB query, API call рж╕рж╣ ржпрзЗржХрзЛржирзЛ async ржХрж╛ржЬ	рж╢рзБржзрзБ ржирзЗржЯржУрзЯрж╛рж░рзНржХ request/response ржПрж░ ржЬржирзНржп
        тЬЕ рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ:

        Promise = тАЬржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ ржЖржорж┐ ржЬрж╛ржирж╛ржмрзЛредтАЭ

        fetch() = тАЬржЖржорж┐ рж╕рж╛рж░рзНржнрж╛рж░рзЗ HTTP request ржкрж╛ржарж╛ржмрзЛ, ржЖрж░ ржЖржорж╛рж░ ржХрж╛ржЬрзЗрж░ ржлрж▓рж╛ржлрж▓ Promise ржЖржХрж╛рж░рзЗ ржлрзЗрж░ржд ржжрзЗржмрзЛредтАЭ
 */



/** Problem 4 & 5 from Page # 326: fetch Practice  */

/** Answer: Done in the earlier part of this file */
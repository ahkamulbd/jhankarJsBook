// const student = {
//     name: 'Learner',
//     getThis () {
//         console.log (this);
//     }
// }
// // student.getThis ();

// const teacher = {
//     name: 'Teacher'
// }
// teacher.getThis = student.getThis;
// teacher.getThis ();

// const freeThis = student.getThis;
// // freeThis ();


// /** Problem 1 from Page # 381 */

const laptop = {
    brand: 'dell',
    getBrand () {
        console.log (this);
        console.log (this.brand);
    }
}
// laptop.getBrand ();
// laptop.getBrand (this);

const mobile = {
    brand: 'Samsung'
}
mobile.getBrand = laptop.getBrand;
// mobile.getBrand ();

/** Problem 2 form Page # 381: How is this confirmed in JavaScript? And how is it changed in which contexts? */

/** 
 * Answer:
 * 
        * ЁЯФ╣ 1. ржХрж┐ржнрж╛ржмрзЗ this ржирж┐рж░рзНржзрж╛рж░ржг (confirm) рж╣рзЯ JavaScript-ржП?

        JavaScript-ржП this function ржХрж▓ ржХрж░рж╛рж░ рж╕ржорзЯ ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯред ржорж╛ржирзЗ who calls the function рж╕рзЗржЯрж╛ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред

        тЬЕ ржХржиржлрж╛рж░рзНржо ржХрж░рж╛рж░ ржирж┐рзЯржо:

        Global Context (Browser ржП)

        console.log(this);


        ЁЯСЙ ржПржЦрж╛ржирзЗ this = window (browser ржП)ред

        Node.js ржП рж╣рж▓рзЗ this = {} (empty object) ржЕржержмрж╛ global рж╣рждрзЗ ржкрж╛рж░рзЗ, execution context ржЕржирзБржпрж╛рзЯрзАред

        Inside Object Method

        const obj = {
        name: "Ahkamul",
        show() {
            console.log(this);
        }
        }
        obj.show();


        ЁЯСЙ ржПржЦрж╛ржирзЗ caller рж╣рж▓рзЛ obj, рждрж╛ржЗ this = objред

        Standalone Function Call

        function demo() {
        console.log(this);
        }
        demo();


        ЁЯСЙ ржПржЦрж╛ржирзЗ ржХрзЛржирзЛ ржЕржмржЬрзЗржХрзНржЯ ржжрж┐рзЯрзЗ ржХрж▓ ржХрж░рж╛ рж╣рзЯржирж┐, рждрж╛ржЗ non-strict mode ржП this = window, strict mode ржП this = undefinedред

        Arrow Function

        const obj = {
        name: "Ahkamul",
        show: () => {
            console.log(this);
        }
        }
        obj.show();


        ЁЯСЙ Arrow function ржирж┐ржЬрзЗрж░ this рждрзИрж░рж┐ ржХрж░рзЗ ржирж╛ред
        ржУржЯрж╛ surrounding lexical scope (ржпрзЗржЦрж╛ржирзЗ function ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ) рж╕рзЗржЦрж╛ржиржХрж╛рж░ this ржзрж░рзЗ рж░рж╛ржЦрзЗред

        рждрж╛ржЗ ржЙржкрж░рзЗрж░ ржХрзЛржбрзЗ this рж╣ржмрзЗ window (ржирж╛ ржпрзЗ obj)ред

        Constructor Function / Class

        function Person(name) {
        this.name = name;
        }
        const p = new Person("Ahkamul");
        console.log(p.name);


        ЁЯСЙ ржПржЦрж╛ржирзЗ this = newly created object (p)ред

        Event Listener (DOM)

        document.querySelector("button").addEventListener("click", function() {
        console.log(this);
        });


        ЁЯСЙ ржПржЦрж╛ржирзЗ this = button (ржпрзЗржЯрж╛рждрзЗ event ржШржЯрзЗржЫрзЗ)ред

        ржХрж┐ржирзНрждрзБ arrow function рж╣рж▓рзЗ:

        document.querySelector("button").addEventListener("click", () => {
        console.log(this);
        });


        ЁЯСЙ ржПржЦрж╛ржирзЗ this = surrounding scope (рж╕рж╛ржзрж╛рж░ржгржд window)ред

        Explicit Binding (call, apply, bind)

        function greet() {
        console.log(this.name);
        }

        const user = { name: "Ahkamul" };
        greet.call(user);   // Ahkamul
        greet.apply(user);  // Ahkamul

        const boundGreet = greet.bind(user);
        boundGreet();       // Ahkamul


        ЁЯСЙ ржПржЦрж╛ржирзЗ this ржХрзЗ ржЬрзЛрж░ ржХрж░рзЗ user ржХрж░рзЗ ржжрзЗрзЯрж╛ рж╣рж▓рзЛред

        ЁЯФ╣ 2. ржХрзЛржи ржХрзЛржи Context ржП this ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рзЯ?

        Caller ржмржжрж▓рж╛рж▓рзЗ (student тЖТ teacher) тЖТ this ржмржжрж▓рж╛рзЯред

        Strict mode ржП тЖТ this undefined рж╣рзЯрзЗ ржпрж╛рзЯ ржпржЦржи standalone function рж╣рзЯред

        Arrow Function ржП тЖТ this ржЖрж░ ржмржжрж▓рж╛рзЯ ржирж╛, surrounding lexical scope-ржП fix рж╣рзЯрзЗ ржпрж╛рзЯред

        Constructor Function ржП тЖТ this ржирждрзБржи object ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред

        call/apply/bind ржжрж┐рзЯрзЗ тЖТ manually this ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛рзЯред

        DOM Event ржП тЖТ this target element ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ arrow function ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ surrounding scope ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред

        ЁЯФ╣ рж╕рж╣ржЬ ржоржирзЗ рж░рж╛ржЦрж╛рж░ рж╕рзВрждрзНрж░

        ЁЯСЙ this ржХржЦржирзЛржЗ function-ржПрж░ ржнрзЗрждрж░ тАЬhardcodedтАЭ ржерж╛ржХрзЗ ржирж╛ред
        this рж╕ржмрж╕ржорзЯ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ тЖТ ржХрзЛржи ржЕржмржЬрзЗржХрзНржЯ ржерзЗржХрзЗ function call рж╣рж▓рзЛ рждрж╛рж░ ржЙржкрж░ред
        рж╢рзБржзрзБ Arrow function ржЖрж░ bind-ржП ржПржЯрж╛ fix рж╣рзЯрзЗ ржпрж╛рзЯред
 */


/** Problem 3 from Page # 381: manager ржирж╛ржорзЗ ржПржХржЯрж╛ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░ред ржпрж╛рж░ ржоржзрзНржпрзЗ assignWork ржирж╛ржорзЗ ржорзЗржержб ржерж╛ржХржмрзЗред рж╕рзЗржЗ assignWork ржорзЗржержбрзЗрж░ ржнрж┐рждрж░рзЗрж░ manager-ржПрж░ tasks ржирж╛ржоржХ ржкрзНрж░рзЛржкрж╛рж░рзНржЯрж┐ (ржПржХржЯрж╛ Array), рж╕рзЗржЯрж╛рждрзЗ ржирждрзБржи ржЯрж╛рж╕рзНржХрзЗрж░ ржирж╛ржо ржпрзЛржЧ ржХрж░ржмрзЗред ржПржЗ ржХрзЛржб рж▓рж┐ржЦрзЗ ржЖржЙржЯржкрзБржЯ ржЪрзЗржХ ржХрж░ред ржЖрж░ ржПржЗ ржорзЗржержбрзЗрж░ ржнрж┐рждрж░рзЗ this ржмрж▓рждрзЗ ржХрж╛ржХрзЗ ржмрзБржЭрж╛рзЯ, рж╕рзЗржЯрж╛ ржорзЗржержбрзЗрж░ ржУржкрж░рзЗ ржХржорзЗржирзНржЯ ржХрж░рзЗ рж▓рж┐ржЦред   */

const manager = {
    tasks: [],

    assignWork (taskName) {
        this.tasks.push (taskName);
        // console.log (`Newly Assigned Task: ${taskName}`);
    }
}
manager.assignWork ('Planning');
manager.assignWork ('Monitoring');
manager.assignWork ('Evaluation');

// console.log (manager.tasks);

/** Explanation:
 * 
    * manager ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржоржзрзНржпрзЗ tasks ржирж╛ржорзЗ ржПржХржЯрж╛ array property ржЖржЫрзЗред

    assignWork ржорзЗржержбрзЗрж░ ржнрзЗрждрж░рзЗ this.tasks.push(taskName) рж▓рзЗржЦрж╛рж░ ржорж╛ржирзЗ рж╣рж▓рзЛ тЖТ
    ЁЯСЙ ржПржЦрж╛ржирзЗ this = manager (ржХрж╛рж░ржг manager.assignWork() ржерзЗржХрзЗ ржлрж╛ржВрж╢ржиржЯрж╛ ржХрж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ)ред

    ржлрж▓рзЗ ржирждрзБржи task рж╕рзЗржЗ manager.tasks array-рждрзЗ ржпрзБржХрзНржд рж╣ржЪрзНржЫрзЗред
 */